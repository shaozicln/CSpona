-- MySQL dump 10.13  Distrib 8.0.42, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: base
-- ------------------------------------------------------
-- Server version	8.0.42

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `advices`
--

DROP TABLE IF EXISTS `advices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `advices` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `type` varchar(255) NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `advices`
--

LOCK TABLES `advices` WRITE;
/*!40000 ALTER TABLE `advices` DISABLE KEYS */;
INSERT INTO `advices` VALUES (1,'桀桀桀','hahaha@qq.com','技术栈の文章','建议多用一些技术栈'),(2,'桀桀桀','hahaha@qq.com','对网站の建议','昼夜切换模式'),(3,'桀桀桀','hahaha@qq.com','技术栈の文章','下次试试react'),(6,'桀桀桀','hahaha@qq.com','对网站の建议','11111111111111'),(7,'桀桀桀','hahaha@qq.com','技术栈の文章','111111111111'),(8,'桀桀桀','hahaha@qq.com','对网站の建议','2222222222222222222222222222'),(9,'AAA','aaaaaaaaaaaa','对网站の建议','aaaaaaaaaaaaaaaaaa'),(10,'桀桀桀','hahaha@qq.com','技术栈の文章','2145647865'),(11,'桀桀桀','hahaha@qq.com','技术栈の文章','23145684-97'),(12,'云深晴雨','2121673191@qq.com','技术栈の文章','新的评论已经出现～');
/*!40000 ALTER TABLE `advices` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `applications`
--

DROP TABLE IF EXISTS `applications`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `applications` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `web` varchar(255) DEFAULT NULL,
  `introduction` varchar(255) DEFAULT NULL,
  `img` varchar(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `background` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `applications`
--

LOCK TABLES `applications` WRITE;
/*!40000 ALTER TABLE `applications` DISABLE KEYS */;
INSERT INTO `applications` VALUES (1,'桀桀桀','hahaha@qq.com','桀桀桀の网站','https://www.aaa.com/','来自桀桀桀的aaa网站','Venti-6.jpg',NULL,NULL,NULL),(25,'null','null','Refined','https://neteralex.cn/','NeterAlex 的个人站','Refined(1).png','null','Refined(1).png','欢迎你噢'),(28,'NeterAlex','neteralex@outlook.com','Refined','https://neteralex.cn/','NeterAlex的个人站与博客','幻灯片1.JPG','Sakamoto.jpeg','maxim-berg-ANuuRuCRRAc-unsplash(1).jpg','欢迎！');
/*!40000 ALTER TABLE `applications` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `articles` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `category_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `view_count` int DEFAULT '0',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `comment_count` int DEFAULT NULL,
  `img` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `category_id` (`category_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `articles_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`),
  CONSTRAINT `articles_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=140 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (4,'今天玩什么？','# 当然是致命公司了!\n但是泰坦图第1e9+7次满货死亡.这种游戏不连麦玩，自己挂在远处队友都不知道，如果侥幸活下来，队友直接开飞船跑了，这种情况 我真的是很绝望啊',4,1,301,'2024-05-18 12:51:04','2025-07-25 13:57:55',0,'zmgs.png'),(13,'cors使用','# 核心代码：\n```go\ncorsConfig := cors.DefaultConfig()\ncorsConfig.AllowOrigins = []string{\"*\"}\ncorsConfig.AllowMethods = []string{\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"}\nr.Use(cors.New(corsConfig))\n```\n',1,1,217,'2024-05-19 11:03:28','2025-08-05 07:46:22',0,'cors.png'),(16,'评论水区','直接发吧\n',12,1,54,'2024-06-01 12:20:38','2025-08-05 07:02:27',0,'Venti-5.jpg'),(29,'js gin连接','#### fetch 正常写\n实时反馈控制台   就这样',1,1,117,'2024-05-21 12:55:09','2025-08-08 08:49:38',0,'34.jpg'),(73,'小游戏','# 一些小游戏\r\n### https://github.com/shaozicln/Game<div style=\"color: rgba(0,0,0,0.6); font-size: 30px; text-align: center;\"><br><br><br>----- 有关Project - Practice的一切都在 -----<br>https://github.com/shaozicln</div>',2,1,109,'2025-01-23 09:52:49','2025-07-24 00:55:52',0,'键盘.jpeg'),(74,'前端小效果','# 一些前端效果\r\n### https://github.com/shaozicln/FrontEndEffects.git<div style=\"color: rgba(0,0,0,0.6); font-size: 30px; text-align: center;\"><br><br><br>----- 有关Project - Practice的一切都在 -----<br>https://github.com/shaozicln</div>',2,1,30,'2025-02-03 08:54:40','2025-07-24 00:55:59',0,'云上五骁-风华正茂.jpg'),(75,'练手小功能','# 一些练手小功能\r\n### https://github.com/shaozicln/Practice.git<div style=\"color: rgba(0,0,0,0.6); font-size: 30px; text-align: center;\"><br><br><br>----- 有关Project - Practice的一切都在 -----<br>https://github.com/shaozicln</div>',2,1,25,'2025-02-03 08:59:04','2025-07-24 00:56:11',0,'lb3.jpg'),(76,'24国庆新生培训出题','# **输入输出**\r\n\r\n主题：NANA勇闯古堡\r\n#### NANA的反转数字门\r\n\r\n​	 NANA要进入【Hello World】古堡！\r\n\r\n​	有一天NANA在 【main】山 挖出了一块地图，上面标示着拥有宝藏的【Hello World】古堡。NANA按照地图来到了古堡门前。打开古堡门需要完成【天堂之门】的考验。\r\n\r\n【天堂之门】的考验如下：输入包括小数点后一位的一个浮点数。\r\n\r\n例如 596.3，要求把这个数字翻转过来，变成 369.5 并输出。\r\n\r\n数据范围：100<= n < 1000\r\n\r\n\r\n#### NANA打魔兽\r\n\r\n​	NANA要打败【锟斤拷（一阶段）】魔兽！\r\n\r\n​	成功解开密码的NANA遇见了古堡boss——【锟斤拷（一阶段）】魔兽，【锟斤拷（一阶段）】魔兽对NANA发动了【烫烫烫】的精神攻击，而NANA在这时也觉醒了魔法攻击。\r\n\r\nNANA每次攻击会消耗自己e格体力，并且造成 m 格伤害，【锟斤拷（一阶段）】一共有 n 格生命值，请你计算一下NANA击败【锟斤拷（一阶段）】需要消耗的体力。\r\n\r\n#### NANA的解密\r\n\r\n​	NANA要完成【锟斤拷（二阶段）】的谜题！\r\n\r\n​	击败了【锟斤拷（一阶段）】。NANA和魔兽【锟斤拷】都十分疲惫，于是【锟斤拷（二阶段）】决定出一个谜题来阻碍NANA，并许诺如果NANA能答对，就给NANA拿宝藏的机会。但是面对【锟斤拷（二阶段）】的迷题，她发现自己一点思路都没有。面对近在咫尺的【宝藏】，聪明的你能帮助NANA打开密码门吗？\r\n\r\n​	谜题如下：墙上有三个单词 WomanStand   WomanGo   ManStand  请按单词拼写规律输出一种水果的英文单词和中文名字     样例输出：AbcDe 阿波呲得鹅\r\n\r\n答案：（ManGo 芒果） \r\n\r\n#### NANA的背包\r\n\r\n​ 	NANA要拿走【01背包】和里面的宝藏！\r\n\r\n​	在你的帮助下NANA终于进入了有宝藏的洞穴，发现里面是一个个【01背包】，每个背包内的宝藏都不同。NANA只能从满地n个背包中拿走四个，当拿起第五个背包时，恢复体力的【锟斤拷】有了变回【一阶段】的趋势，NANA已经没有体力再打败一次【锟斤拷（一阶段）】了。已知每个背包都不一样，她想知道：拿走的四个【01背包】（不排序），一共有多少种可能？\r\n\r\n​	\r\n\r\n```plaintext\r\n输入：\r\n第一行输入一个数 n\r\n数据保证：3<=n<=103。\r\n输出：\r\n输出多少种可能。\r\n```\r\n```c\r\n210\r\n\r\n```\r\n\r\n\r\n\r\n#### NANA回家\r\n\r\n​	NANA要带着装有宝藏的【01背包】们回家！\r\n\r\n​	历经亿点点波折，NANA坐上了回家的小船。有道是：“ 无风水面琉璃滑，不觉船移 ”，慢悠悠的载着宝藏回家，NANA的心情非常好，她乘坐的小船原本以每分钟 *x* 米的速度行驶。这时，她突然“觉船移”了。因为NANA发现船的移动速度变慢了，每分钟比前一分钟要少行驶m米，NANA很好奇，当船完全停止的时候，船一共移动了多少米（结尾保留两位小数）？\r\n\r\n\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    double x, m;\r\n    scanf(\"%lf %lf\", &x, &m);\r\n    double n = x / m;\r\n    //首项x 尾项0 项数 x/m + 1\r\n    double S = (n + 1) * x / 2;\r\n    printf(\"%.2lf\\n\", S);\r\n    return 0;\r\n}\r\n```\r\n\r\n```plaintext\r\n输入：10.0 2.0； 输出： 30.00\r\n```\r\n\r\n\r\n\r\n#### NANA交朋友\r\n\r\n​	NANA要在【NEAU】结交新朋友！\r\n\r\n​	NANA得到宝藏之后离开【main】山四处旅游去了。在黄金的六月，她来到了【NEAU】，一些大学生们在拍毕业照，观看已久的NANA被邀请帮助他们拍照。他们之间关系非常好，每人都会和其他人合拍一张照片，NANA一共拍了 x 张照片，请问一共有多少人参与了合影？\r\n\r\n​     \r\n\r\n```plaintext\r\n输入：输入一行一个整数 x\r\n保证 1 <= x <= 109.   12、\r\n输出：输出一个整数代表人数。   4\r\n```\r\n\r\n\r\n\r\n```c\r\n#include <stdio.h>\r\n#include<math.h>\r\n\r\nint main() {\r\n    int x;\r\n    int ans = sqrt(x) + 1;\r\n    printf(\"%d\\n\", ans);\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n\r\n# 结构体\r\n\r\n#### NANA的旅行计划\r\n\r\n​	NANA得到宝藏离开【main】山四处旅游。对于NANA来说，世界太大了，但她觉得国外的月亮或许也没有那么圆。于是NANA决定先制作一份国内旅行计划。NANA不太熟悉电脑操作，请你帮帮NANA实现以下效果：\r\n\r\n​	每个旅行地点都有自己的信息，包括地名、票价、分类等。现在NANA想要进行m次查询，每次查询第i个地点的某一个信息。其中查询地名操作为Name，查询省份操作为Province，查询类型操作为Type\r\n\r\n```plaintext\r\n输入\r\n第一行输入一个正整数n代表旅行计划有n个地点\r\n接下来n行：每一行输入旅行地点的名称(Name)、省份(Province)、类型(Type)，中间用空格隔开。\r\n然后输入一个正整数m表示接下来进行m次查询\r\n接下来m行：每一行输入查询的地点编号i和将要查询的信息名称\r\n数据范围：1<=n<=1000，名称、票价、类型的长度保证在1-100之间，1<=m<=1000\r\n\r\n\r\n输出\r\nm行输出，每一行输出查询的地点信息\r\n```\r\n\r\n\r\n\r\n```plaintext\r\n样例输入\r\n3\r\nImperial_Palace Beijing Humanities\r\nWest_Lake ZheJiang Lake\r\nEverest Tibet Mountain\r\n3\r\n1 Type\r\n2 Name\r\n3 Province\r\n样例输出\r\nHumanities\r\nWest_Lake\r\nTibet\r\n```\r\n\r\n\r\n\r\n#### NANA的旅行经费\r\n\r\n​	NANA毫无节制0收入的四处旅游，让曾经拥有很多【宝藏】的她濒临破产了。现在NANA需要在这个地方打工来赚取自己接下来的旅行经费。和NANA一起打工的是NANA旅行中结识的一些伙伴。**过了一个冬天和一个春天之后**，老板告诉大家所有人的工资将上涨25%，但是老板还不舍得给能干的员工很高的工资，于是他规定：最高工资5000，所有人不可超过该工资。\r\n\r\n​	输入NANA和伙伴们的信息，请设计一个结构体储存这些信息，并设计一个函数模拟工作和涨工资过程，其参数是这样的结构体类型，返回同样的结构体类型，并输出员工信息。\r\n\r\n\r\n\r\n```plaintext\r\n输入格式\r\n第一行输入一个正整数 n，表示员工个数。\r\n第二行开始往下 n 行。每行首先是一个字符串表示员工姓名，再是一个整数表示员工年龄，再是一个整数为去年工资。\r\n\r\n输出格式\r\n输出 n 行，每行首先输出一个字符串表示姓名，再往后两个整数，表示经过一年的打工后大家的年龄和他们涨薪后的工资。以空格隔开。\r\n\r\n输入输出样例\r\n输入 \r\n3\r\nNANA 20 3600\r\nChenYu 23 3100\r\nVenti 2600 4200\r\n\r\n输出\r\nNANA 21 4500\r\nChenYu 24 3875\r\nVenti 2601 5000\r\n```\r\n代码如下：\r\n\r\n```c\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nstruct Salary {\r\n	string name;\r\n	int age, salary;\r\n} a[100000];\r\n\r\nint main () {\r\n	int n;\r\n	cin >> n;\r\n	for (int i = 1; i <= n; i++) {\r\n		cin >> a[i].name >> a[i].age >> a[i].salary;\r\n		a[i].age++, a[i].salary = a[i].salary * 1.25;\r\n		if (a[i].salary > 5000) a[i].salary = 5000;\r\n		cout << a[i].name << \" \" << a[i].age << \" \" << a[i].salary << endl;\r\n	}\r\n	return 0;\r\n}\r\n```',1,1,378,'2024-08-22 01:31:24','2025-08-05 02:31:23',0,'lb6.jpg'),(77,'测试索引跳转','# 12\r\n4567541562146\r\n## 34\r\n4864896\r\n### 56\r\n4974896\r\n## 78\r\n278\r\n',12,1,36,'2025-02-04 11:07:10','2025-07-24 00:57:42',0,'31.jpg'),(95,'漫游地(Wanderland)正式开放！欢迎各位来玩！','## 发帖：见左上角个人中心（请先登录哦）\r\n咳咳，既然……既然点进来了，那没办法了，来留个言再走吧~\r\n\r\n![Image](http://127.0.0.1:3000/Pictures/20250805140653_注册.jpg)',1000,1,1171,'2025-07-16 05:37:32','2025-08-08 08:49:09',0,'Venti-7.jpg'),(101,'又双叒叕想起来旅行的意义了','# 是谁在炎炎夏日送来一阵惊喜？\n# 前瞻海报！\n# 身影美丽，欲罢不能？\n# 温迪宝宝！\n![Image](https://cspona.top/Pictures/20250717092633_Venti250716.png)\n# 来不及了，就这张图片了，我亲亲亲亲亲亲亲亲',1000,1,473,'2025-07-17 01:28:03','2025-08-08 08:49:06',0,'Venti250716.png'),(114,'网站？我来——','我带着折耳根来看看（嚼嚼嚼）\n哇，这个网站（嚼嚼嚼）\n哇，这个界面（嚼嚼嚼）\n哇，这个按钮（嚼嚼嚼）\n哇，这个设计（嚼嚼嚼）\n哇，这个主页（嚼嚼嚼）\n哇，这个文章（嚼嚼嚼）\n哇，这个......\n完了，折耳根吃完了\n站长你这卖折耳根吗\n![Image](https://cspona.top/Pictures/9434debb6aef88560317feeb297ec76f.png)',1000,3,87,'2025-07-18 08:46:23','2025-08-08 08:49:07',0,'9434debb6aef88560317feeb297ec76f.png'),(116,'有个人刚看完罗小黑战记2，这是她现在的大脑','### 师姐我太爱你了；\r\n### 童年男神又杀回来了；\r\n### 池长老你有点好嬷；\r\n### NAZA和NAZA你们不要再打了啦(2)；\r\n### 请输入文本.jpg\r\n![Image](https://cspona.top/Pictures/20250721100605_b.jpg)\r\n![Image](https://cspona.top/Pictures/20250721100619_c.jpg)',1000,1,41,'2025-07-21 02:06:24','2025-08-08 08:34:02',0,'c.jpg'),(119,'AI的使用','## 三个AI生成内容的对比\r\n\r\n- 概念定义类问题：\r\n\r\n- 解释代码型问题：\r\n\r\n- 代码生成类问题：\r\n\r\n\r\n### 今天通过一个视频看到了很有用的文章。\r\nai可以生成70%的代码，但是剩下的那30%没有工程师的修正和经验更改也是一堆废代码\r\n\r\nai代码存在学习悖论：\r\n- 资深开发者利用ai加速已擅长的工作\r\n- 初级开发者试图借助ai来学习该如何做.但是两者的结果截然不同：\r\n- 资深工程师快速理解想法制作原型，生成基础之后细化，并且提供可替代方案，之后自动化编码\r\n- 初级工程师接受了错误或者过时的解决方案，忽略关键的安全和性能考虑，在调试ai的时候遇到困难，最后构建出初级工程师并未完全理解的脆弱系统\r\n\r\n在我第一次编写博客和前一天弄vue-marked的时候深刻的明白了这一点，即对于不熟练的技术，一旦让ai开始修复bug，就会陷入一种循环：\r\n- 尝试修复1个小bug\r\n- ai给了一个看似合理的修改\r\n- 这个修改不起作用/破坏其他功能\r\n- 再次请求ai修复\r\n- 引发了新的问题\r\n- 循环往复\r\n这种循环对于我这种初学者相当痛苦，因为我缺乏理解问题根本原因的心智模型。对于经验丰富的开发者遇到bug时，可以用经验推断原因，而我只能和我并不理解的代码干瞪眼并且重复切换ai，这是一个很笨也很不符合常理的做法，所以学习的不能停下来的，还是要亲手去实践而不是依赖ai，ai在代码方面属实是没有工程师的经验来得快，他们现在的模型还经受不了大量代码的考验。\r\n\r\n更严重的是，这对我这种入门级别的学习会产生阻碍作用：\r\n当代码凭空出现而我不了解背后原理时：\r\n- 无法培养调试技能\r\n- 错失学习基本编程模式的机会\r\n- 无法推敲架构决策\r\n- 维护和扩展代码时会遇到困难\r\n于是对ai形成依赖，无法培养出自己应对问题的能力\r\n\r\n### 解决方案：\r\n将ai当做学习工具而非仅仅是代码生成器\r\n1.利用ai快速生成制作原型\r\n2.花时间理解生成的代码的工作原理\r\n3.使用ai的同时学习基本的编程概念，比如自己总是犯错的字符串/非字符串问题\r\n4.逐步建立扎实的知识基础，别人随时问，自己不会变成“我来查查ai”这种人\r\n需要耐心与时间，快速完成成果的思想是违背这种健康使用ai方式的\r\n\r\n最务实的方法是利用ai加速学习而不是完全代替学习\r\n因为最终那些30%的知识，也就是令软件达到生产就绪可维护并且稳健的样子，让然需要工程师本人扎实的编程知识和工程知识。\r\n\r\n### 有效方法：实用模式\r\n1. “AI初稿”模式\r\n- 让 AI生成一个基本实现;\r\n- 手动审查并重构，使其模块化；\r\n- 添加全面的错误处理；\r\n- 编写详尽的测试；\r\n- 记录关键决策。\r\n2. “持续对话”模式\r\n- 每个不同任务都开启新的 AI 对话；\r\n- 保持对话上下文简洁且聚焦；\r\n- 经常审查并提交修改；\r\n- 保持紧密的反馈循环。\r\n3. “信任但验证”模式\r\n- 利用 AI生成初始代码；\r\n- 对所有关键路径进行手动审查；\r\n- 对边缘情况进行自动测试；\r\n- 定期进行安全审计。\r\n\r\n### ai的未来：\r\n1. 加速已知：生成我们已经理解的代码\r\n2. 探索不同：快速制作原型和探索不同方案，帮助我们快速测试各种概念。\r\n3. 自动化：减少样板代码任务，让我们更专注于更重要更有趣的问题\r\n\r\n### 我们需要做：\r\n1．从小处开始\r\n- 使用 AI 处理那些独立、定义明确的任务\r\n- 仔细检查AI生成的每一行代码\r\n- 逐步扩展到更大功能的开发\r\n2．保持模块化\r\n- 将所有内容拆分成小而集中的文件\r\n- 在各组件之间保持清晰的接口\r\n- 对模块边界进行文档记录\r\n3．相信经验\r\n- 利用AI加速，但不要取代自己的判断\r\n- 对那些感觉不对劲的AI生成代码提出质疑\r\n- 坚持自己的工程标准\r\n\r\n### 代理式软件工程的兴起：\r\n不仅仅是响应提示，能够规划、执行并自主迭代解决方案，展现更高自主性\r\n\r\n这种向代理式开发的转变将要求我们提升技能：\r\n- 更强的系统设计和架构思维\r\n- 更好的需求规范与沟通能力\r\n- 更加注重质量保证和验证\r\n- 加强人类与 AI协作的能力\r\n\r\n### 下一代工具：\r\n- 视觉理解解（UI截图、模型图、流程图）\r\n- 口头语言对话\r\n- 环境交互（浏览器、终端、API)\r\n\r\n### 软件与工艺：\r\nai快速构建，我们也可能失去某些关键东西：真正精致的、面向消费者的体验的艺术\r\n\r\n打造真正的自助式软件一一让用户永不需要联系支持需要一种全态：\r\n- 对错误提示的极致关注\r\n- 在慢速网络环境下进行测试\r\n- 优雅地处理每一个边缘情况\r\n- 让功能易于被发现\r\n- 与真实的、通常非技术性的用户一起测试\r\n这种对细节的关注（也许）无法由AI生成。它源于同理心、经验和的深切热爱。\r\n\r\n我们将迎来个人软件开发的复兴，由开发者精心打造的产品——ai可以更好地促成这种复兴，开发者可以专注于那些对用户舒适度更强的部分，而非模板化的代码\r\n\r\nAI并没有让我们的软件质量得到显著提高，因为软件质量（也许）从来不是主要受编码速度限制的。软件开发中的难点——理解需求、设计可维护系统、处理边缘情况、确保安全和性能仍然需要人类的判断。\r\n\r\n————20250214\r\n                                                                                                                            \r\n',1,1,38,'2025-01-19 10:56:55','2025-08-08 08:37:02',0,'b.jpg'),(121,'ComputerBasis','# 乱码原理与解决\r\n\r\n## 计算机的本质\r\n\r\n```plaintext\r\n用来计算和处理电信号的机器\r\n```\r\n\r\n#### 二进制\r\n\r\n计算机由大量晶体管组成，每个晶体管只存在高电平与低电平\r\n\r\n- 1：高电平（2.4-5V ）\r\n- 0：低电平（0~0.4V ）\r\n\r\n```plaintext\r\n各种图像、软件是封装好的二进制\r\n```\r\n\r\n## 计算机存储数据\r\n\r\n### 计算机存储文字\r\n\r\n```plaintext\r\n文字用十进制数字编号，十进制转换成二进制储存\r\n```\r\n\r\n- **码位**：用来代表字符的二进制数\r\n\r\n![Image](https://cspona.top/Pictures/20250725200735_jisuanjicunchuwenzi.png)\r\n\r\n- **bit（二进制位）**：用来表示 0/1 的位置\r\n\r\n- **byte （字节）**：8 个 bit组成，是计算机用于表示数据的基本单位，一个 byte 有256（2e8）种取值。\r\n\r\n- **单位**：KB（千字节），MB（兆字节），GB（吉字节），TB（太字节），PB（拍字节），EB（艾字节），ZB（泽字节），YB（尧字节）。\r\n\r\n### 编码与解码\r\n\r\n- **ASCII表**：所有英文 + 标点仅有128，用了一半的码位，1963年美国国家标准协会排号 0~127 组成了ASCII码表（美国i信息交换标准代码）\r\n- **编码**：字符按照 ASCII表 转换为十进制数\r\n- **解码**：十进制数按照 ASCII表 转换为字符\r\n\r\n### 字符集与乱码\r\n\r\n- **字符集**：世界各个国家和地区制定了支持不同语言的字符集\r\n- **乱码**：不同字符集读取同一码位会导致乱码；读取到不存在的码位会出现无意义字符\r\n\r\n- **Unicode（万国码）**：统一码联盟制定的囊括世界各国文字的超大字符集（一个字符占据3~4个 byte ）\r\n- **UTF-8**：针对Unicode的可变长度字符编码，支持1115200个码位，为不同字符动态分配1~4个 byte\r\n  	- ASCII字符：1 byte\r\n  	- 拉丁文、希腊文等：2 byte\r\n  	- 中日韩文、埃塞俄比亚语（会跳舞的字符）：3 byte\r\n  	- 少数字符和古代文字（古埃及象形文字）：4 byte\r\n\r\n### 常见问题与修复\r\n\r\n- **UTF-8没有完全解决乱码，由于新旧编码切换，造成了更多离谱的乱码**\r\n  	- 早期记事本保存中文乱码的原因：GBK编码被当成UTF-8错误读取了（开头很像）*win10后续版本已修复。*\r\n\r\n- **修复：**查询字符集 + 切换字符集打开\r\n\r\n  - **Tips**：字符集正确也不一定显示正常，因为**字符集正确只能保证计算机编码正常，但是解码是否正常又是另外一个问题**\r\n\r\n  - 字体决定一段内容的最终呈现效果，不合适的字符\r\n\r\n  - 字体回退：使用了字体不支持的字符，系统而后软件查找另一个支持该字符的字体显示，向字体开发人员反馈\r\n  - 不可修复：文件损坏、病毒感染、软件Bug，向软件开发人员反馈\r\n\r\n- **平时要做好文件备份**\r\n\r\n# 为什么应用程序是特定于操作系统的？\r\n\r\n应用程序不止与架构相关，还与操作系统相关\r\n\r\n### 兼容性问题\r\n\r\n系统调用通常以函数存在，并大致分为六种，每个操作系统提供自己独特的一套系统调用，用户程序极度依赖系统调用。不同操作系统查询到 **未定义行为** 的系统调用会导致程序崩溃。\r\n\r\n### 系统调用：\r\n\r\n操作系统可以同时运行多个进程\r\n\r\nCPU是核心部件，为防止利用CPU攻击电脑，CPU有两种运行模式，用户模式和内核模式，用户模式只可以使用有限的指令集。\r\n\r\n操作系统在内核模式。\r\n\r\n因此当用户需要操作硬件时，需要请求操作系统代为处理。\r\n\r\n- 例如一个程序要打开文件写入内容，会调用一个相应的 **系统函数** ，要求操作系统完成定位磁盘上的文件并写入内容。\r\n\r\n当程序需要向操作系统请求某些东西时，会触发中断，使CPU切换到内核模式，并由操作系统来控制。\r\n\r\n**操作系统如何知道请求的是哪个系统调用？参数如何传递？：** 为每个调用分配一个唯一的编号，在用硬件级别调用系统调用之前，程序会将对应的编号写入寄存器中，操作系统接管后，它会读取寄存器的值，并查阅系统调用表以确定请求的是哪个系统调用。\r\n\r\n**如果两个操作系统使用完全相同的系统调用表，就能保证兼容性吗？：** 被用来指定系统调用编号的寄存器可能不同，所以不能保证。\r\n\r\n**如果两个操作系统使用完全相同的系统调用表，就能保证兼容性吗？：** 参数传递方式取决于操作系统，有些系统将参数存储在寄存器中，有些系统将参数写入特定内存区域，或者两者结合使用。\r\n\r\n- 例如Linux中一个系统调用如果少于6个参数，它们必须存储在寄存器中，超过6个参数，剩下的参数会写入内存\r\n\r\n**参数在内存中的存储也不同：** 使用栈存储，还是特定内存位置？\r\n\r\n**应用二进制接口（ABI）：** 定义类在特定操作系统和架构上二进制代码不同组件如何交互\r\n\r\n### 其他原因\r\n\r\n**可执行文件格式：** 对于计算机来说，在全是0和1的文件中，程序的每个部分（数据、元数据、指令等等）位于何处，不同操作系统的定义不同。\r\n\r\n- Linux使用可执行与可链接格式；Windows使用便携式可执行文件格式\r\n\r\n**运行时环境：** 一些编程语言不会直接编译成机器码，它们会运行在虚拟机或解释器上。那么只要系统上安装了虚拟机（例如JVM），同样的代码就可以跨多个平台运行，虚拟机就是为了绕过各种兼容性问题。\r\n\r\n现代应用程序通常以模块化方式构建，如果每个模块都被编译成机器码那很棒，但是如果有一个模块依赖于运行时环境，但这个环境并没有被安装在机器上，那么整个应用程序可能都无法正常运行。',1,1,11,'2024-09-15 12:23:53','2025-07-28 08:47:39',0,'qyyz.png'),(123,'Crash Course Computer Science','# 一、硬件部分\r\n\r\n## 1、计算机早期历史\r\n\r\n- 计算机设备发展：\r\n  - 算盘-\r\n  - 步进计算器（第一个可以做加减乘除的机器）-\r\n  - 差分机-\r\n  - 分析机（通用计算机，Lovelace写了假想程序，第一个程序员）-\r\n  - 打孔卡片制表机（人口普查）\r\n- 计算机的本质：极其简单的组件，经过一层层复杂的抽象，做出复杂的工作\r\n- 早期历史：IBM机器制表公司\r\n\r\n## 2、电子计算机\r\n\r\n 拥有了细微控制电流的手段\r\n\r\n- 计算机设备发展：\r\n  - 继电器（1s最多50次开关，发现死虫子是bug来源，）-\r\n  - 真空管（“巨人一号”大规模使用真空管，编程需要配置）-\r\n  - 第一台通用可编程电子计算机（ENIAC）-\r\n  - 晶体管（1s可以开关1w次；晶体管：<50nm/a4纸：10wnm；硅谷：晶体管和半导体的基础材料是硅）\r\n- 肖克利半导体-仙童半导体-英特尔\r\n\r\n## 3、布尔逻辑和逻辑门\r\n\r\n- 电流可以传递信号，通过电路逻辑门可以参与逻辑运算\r\n\r\n- 二进制：通电1 断电0 防干扰，拥有数学布尔代数的现成优势基于此引出基本的逻辑电路\r\n\r\n- NOT 非门（on - 接地 -->实现off）：真假反转【三角形前有一个圆点】\r\n\r\n- AND 与门（两个晶体管串联）：同真为真，一假即假【D形】\r\n\r\n- OR 或门（两个晶体管并联）：一真为真，同假为假【太空船形】\r\n\r\n- XOR 异或门：同假异真\r\n\r\n![Image](https://cspona.top/Pictures/20250725203122_xor.png)\r\n\r\n可将逻辑门用符号简化，抽象使得工程师更加关注于整体而不必关心细节\r\n\r\n## 4、二进制\r\n\r\n- 信号可以存储信息\r\n\r\n- 0 1 皆为1位 bit 8位为1字节 byte\r\n\r\n- 数的存储\r\n\r\n  - 整数，一位符号位，其余皆数位\r\n\r\n  - 浮点数 符号位 指数位 有效数位\r\n\r\nASCII Unicode\r\n\r\n## 5、算术逻辑单元\r\n\r\n- 逻辑门可以抽象成算术逻辑单元\r\n  - 算术逻辑单元 ALU，Arithmetic&Logic Unit 由一个算数单元和一个逻辑单元组成\r\n\r\n- 算数单元：\r\n  - 由基础的门组件抽象成半加器（只能用于一位运算），多个半加器抽象成一个全加器（可用于多位运算）\r\n  - 溢出的概念：吃豆人\r\n  - 乘除法\r\n\r\n- 逻辑单元：\r\n\r\n  - 执行逻辑操作及数值验证操作\r\n\r\n  - 把算数逻辑单元再次进行抽象，用V表示\r\n  - FLAG标志 （是否相等、是否小于、是否溢出）\r\n\r\n## 6、寄存器和内存\r\n\r\n逻辑门可以抽象成存储结构\r\n\r\n- RAM：随机存取存储器，就是内存（内存条）。只在有电的情况下存储东西，比如游戏状态，且只记录当前的事\r\n- memory：持久存储，电源关闭数据也不会丢\r\n- 更多内存存储技术都是矩阵层层嵌套来存储大量信息\r\n\r\n- 使用逻辑门可抽象成锁存器（存储一位），多个并列的锁存器抽象成一个寄存器（可用于多位存储）\r\n\r\n  -  锁存：放入数据-写入；拿出数据-读取\r\n\r\n  -  使用门锁矩阵有利于统筹管理，对访问和修改的权限进行限制\r\n\r\n  -  寄存器能存一个数字。这个数字有多少位（二进制），叫做“位宽”\r\n     - 64位宽需要129条线：并排放置\r\n       - 数据线-64，连接输出端的线-64，启用所有锁存器线-1\r\n     - 256位宽只需要35条线：矩阵存储\r\n       - 数据线-1， 允许写入线-1，允许读取线-1，矩阵上选择锁存器的线-16+16\r\n     - 行列表示：二进制地址（12行8列：11001000）\r\n     - 地址转行列：多路复用器\r\n       - 两个多路复用器，一个处理行，一个处理列\r\n\r\n- 内存是由多个存储模块抽象出来的 \r\n\r\n## 7、中央处理器CPU\r\n\r\n- 逻辑门的抽象组合成更高的抽象 ：CPU\r\n  - CPU负责执行程序，时钟精准地调控着CPU的运行节奏\r\n  - CPU内部如果用一条线连接两个组件，这条线是所以必要线路的抽象\r\n  - CPU工作过程主要有三步：取指令，解码，执行\r\n- 组一个CPU\r\n  - RAM-1：八位\r\n  - 寄存器-4：临时存储和操作数据\r\n  - 指令地址寄存器-1：追踪程序运行到哪里了，存当前指令的内存地址\r\n  - 指令寄存器-1：存当前指令\r\n- CPU运行程序的过程\r\n  - 所有寄存器初始值为0\r\n  - 取指令阶段：对应内存地址（例如0）的值（例如00101110）会复制到指令寄存器\r\n  - 解码阶段：值（例如00101110）\r\n    - 前四位 0010 是LOAD_A：表示将RAM的值存入寄存器A\r\n    - 后四位 1110 （14）是RAM地址\r\n  - 执行阶段：根据解码得到的 14 ，将RAM 14 对应的值存入寄存器A\r\n  - 指令完成后关掉所有线路，不同指令由不同逻辑电路解码\r\n- 时钟：负责管理CPU的节奏\r\n  - 时钟以精确的间隔出发电信号\r\n\r\n- 时钟速度（Hz）：CPU“取指令-解码-执行”的速度\r\n  - 1Hz = 1s一个周期\r\n    - 6分钟完成4条指令：0.03Hz\r\n    - 如今的电脑和手机：几千兆赫兹（1s10亿次时钟周期）\r\n\r\n  - 计算机超频：修改时钟速度，加快CPU的速度\r\n    - 超频太多会让CPU过热/产生乱码\r\n\r\n  - 计算机降频：用户离开/运行性能要求较低的程序时降频可以更省电（动态调整频率）\r\n\r\n## 8、指令和程序\r\n\r\n-  强大而抽象的控制方式 ：指令与程序\r\n\r\n-  指令集是指令的使用说明，不同指令具有不同简单的功能，多个指令组合成强大的程序，可以去处理复杂的任务。\r\n\r\n## 9、高级CPU设计\r\n\r\n- 现代CPU的性能性能提升，使用新的制造工艺\r\n\r\n  - 增加核心数\r\n\r\n  - 提高时钟频率\r\n\r\n  - 增加缓存容量\r\n\r\n  - 改进设计架构\r\n\r\n- #### 优化一个指令流吞吐量的性能提升1-   缓存（cache）：\r\n\r\n  CPU从内存（RAM）拿数据时，内存（RAM）不用传一个，可以传一批；时间长，但是可以缓存\r\n\r\n  - 缓存（cache）离CPU近，一个时钟周期就能给数据，CPU不用空等\r\n  - 缓存命中：想要的数据已经在缓存\r\n  - 缓存未命中：想要的数据不在缓存\r\n  - 用途：当临时空间，存一些中间值，适合长/复杂运算\r\n  - 脏位：缓存（cache）中计算出的内容和原来内存（RAM）中已有的数据不相符合 的数据 为“脏”\r\n    - 缓存满了而CPU又要缓存时，在清理缓存腾出空间之前，会先检查“脏位”\r\n    - 如果数据时“脏”的，在加载新内容之前，会把数据写回内存（RAM）\r\n\r\n- #### 一个指令流吞吐量的性能提升2-   指令流水线：\r\n\r\n  - 并行处理：执行一个指令的同时，解码下一个指令，读取下下下个指令\r\n\r\n  - 乱序执行（流水线非常高效所以几乎所有处理器都有流水线）：必须要明确指令间的依赖关系，必要时要停止流水线\r\n\r\n  - 条件跳转：这些指令会改变程序的执行流\r\n\r\n  - 推测执行：CPU会猜测哪条路可能性更大，然后提前将指令放进流水线\r\n\r\n    - 分支预测：CPU厂商开发推测执行准度更高的分支路径，现代CPU正确率超过90%\r\n\r\n    - 理想情况下，流水线一个时钟周期完成一个指令\r\n\r\n  - 超标量处理器：一个时钟周期完成多个指令。\r\n    - 即便有指令流水线，处理器也会有闲置的部分\r\n\r\n- ####  同时运行多个指令流的性能提升：多核处理器：\r\n\r\n  - 一个CPU芯片里，由多个独立处理单元，像是有很多个独立CPU\r\n    - 整合紧密，可以共享一些资源-   缓存：多核合作运算\r\n  - 双核/四核是最常见的\r\n\r\n- #### 超级计算机：神威·太湖之光\r\n\r\n## 10、早期的编程方式\\（·&forall;·）/*\r\n\r\n穿孔纸卡，纸带，插板，开关\r\n\r\n- 存储程序计算机：数据寄存器+指令寄存器+指令地址寄存器+内存（存数据和指令）\r\n- 程序和数据需要某种方式输入计算机\r\n\r\n# 二、软件部分\r\n\r\n## 11、编程语言发展史\r\n\r\n机器码\r\n\r\n汇编\r\n\r\n低级语言\r\n\r\n高级语言\r\n\r\n- 1960：ALGOL，LISP，BASIC\r\n- 1970：Pascal，C，Smalltalk\r\n- 1980：C++，Objective-C，Perl\r\n- 1990：Python，Ruby，Java\r\n- 千禧年后：Swift，C#，Go\r\n\r\n## 12、编程原理-语句与函数\r\n\r\n语句：描述一种状态\r\n\r\n语法：规定句子的一系列规则\r\n\r\n函数：实现一种单一的功能\r\n\r\n## 13、算法入门\r\n\r\n算法是一种处理数据的手段，人们常常用它寻找最优解，针对算法的效率提出了时间复杂度和空间复杂度\r\n\r\n## 14、数据结构\r\n\r\n数据结构是一种组织数据的手段，针对不同的数据，不同的问题，具有不同的组织方式\r\n\r\n- 指针：一种特殊变量，指向一个内存地址，因此得名\r\n- 链表：\r\n  - 循环链表：一个节点包括变量和指针，最后一个节点的指针指向第一个结点内变量的地址即为循环链表\r\n  - 非循环链表：最后一个节点的指针为0，null代表链表尽头\r\n  - 链表数据结构：\r\n    - 栈（后进先出）\r\n    - 队列（先进先出）\r\n    - 树（一个节点内两个指针，数据顺序仍为单向）\r\n    - 图（一个节点内多个指针，数据随机组合）\r\n    - 堆\r\n    - 红黑树\r\n\r\n## 15、阿兰·图灵/图灵机\r\n\r\n图灵机可以解决一切计算问题但不能解决一切问题，和图灵机一样完备叫作图灵完备，通过图灵测试则证明计算机达到了智能程度\r\n\r\n- 计算机科学之父：阿兰·马蒂森·图灵\r\n  - 因同性恋被判处激素压制性欲\r\n  - 图灵于1954年服毒自尽，享年41岁\r\n- 图灵奖：计算机领域最高奖项，计算机界的诺贝尔奖\r\n- 图灵测试：计算机能欺骗人类它是人类，才算是智能\r\n  - 一个人和两个门内对话，如果分不清哪个是真人哪个是计算机，那么计算机就通过了图灵测试\r\n  - 验证码：公开全自动图灵测试，用于区分计算机和人类\r\n\r\n## 16、软件工程\r\n\r\nMargaret Hamilton（女性程序员）为了预防程序出错，提出“软件工程”的概念，在NASA的阿波罗计划中避免了严重问题。\r\n\r\n- Object（对象）：\r\n  - 大型项目上千万行代码，将代码打包成函数还是有点不方便\r\n    - 解决办法：将函数打包成层级，把相关代码都放在一起，打包成对象\r\n- 面向对象编程：把相关函数打包成对象的思想，通过封装组件，隐藏复杂度\r\n  - 核心：隐藏复杂度，选择性公布功能\r\n  - API：程序编程接口，帮助一个团队中负责不同部分的程序员们相互使用代码\r\n    - API控制哪些函数和数据让对象外部访问，哪些仅供对象内部使用\r\n  - public/private：指定函数权限\r\n  - IDE（集成开发环境）：专门用来写代码的工具\r\n  - debugging（调试）：解决出错代码。**！！！很重要，大多数程序员会花费70%~80%的事件调试，而不是在写代码**\r\n    - 老师推荐**Vim**（哈哈哈\\（·&forall;·）/*）\r\n  - 文档和注释：帮助一个团队中负责不同部分的程序员们相互理解代码。\r\n    - 文档：**！！！很重要，一般放在README.md文件，提高代码复用性**\r\n    - 注释：**！！！很重要，放在源代码里，帮助开发者本人和其他人理解**\r\n  - Git（版本控制）\r\n  - QA（质量保证测试）：一般由个人或者小团队完成，模拟各种情况，保证软件上线后尽可能的少出错，即找bug\r\n  - Beat、Alpha：\r\n    - Alpha版本：很粗糙、错误多，在公司内部测试（内测版）\r\n    - Beat版：软件接近完成，但不是100%完全测试过。\r\n      - 公司向公众发布Beat版，帮助发现问题，将用户作为免费的QA团队\r\n\r\n## 17、集成电路与摩尔定律\r\n\r\n- 数字暴政：想要提升性能-->加更多部件-->更多的电线和更复杂的电路 的问题\r\n\r\n- IC（集成电路）：将电路所有组件都集成在一起（1959年仙童半导体，以硅为材料）\r\n\r\n  - 就像电脑工程师的乐高积木，可以组合设计\r\n  - 但还是需要连起来组成计算机\r\n\r\n- PCB（印刷电路板）：可以大规模生产、不需要焊接和电线；通过蚀刻金属，把零件连接到一起\r\n\r\n- PCB+IC结合使用：解决了数字暴政问题。更小、更便宜、更可靠\r\n\r\n- 光刻：用光把复杂图案印到材料上，可以实现更复杂的设计，使得小型化成为现实。\r\n\r\n  - 光刻分辨率：从大约1万纳米（1/10头发直径）发展到14纳米（比红细胞小400倍）\r\n\r\n- 摩尔定律：总结了性能和成本的规律但正在受到光波长，量子效应的挑战，所以**未来计算机4.0时代就是量子计算机的世界了**\r\n\r\n- CPU晶体管数量爆发增长（大概每十年翻三十倍）：\r\n\r\n  - 1980年：3万\r\n  - 1990年：100万\r\n  - 2000年：3000万\r\n  - 2010年：10亿\r\n\r\n  不止CPU，大多数电子器件都在指数式发展：内存、显卡、固态硬盘、摄像头感光元件\r\n\r\n  - 显卡：图形渲染、视频解码和编码、游戏帧率和画质、图形和数据处理、多显示器支持、虚拟现实渲染3D环境、加速机器学习和人工智能算法的计算过程\r\n    - 集成显卡：集成在主板或处理器上，功耗较低，适合日常使用和轻度图形处理；\r\n    - 独立显卡：单独的硬件组件，通常提高更高的性能，适合游戏和专业图形处理。\r\n\r\n## 18、操作系统\r\n\r\n- os（操作系统）：是一种程序，具有操作硬件的特殊权限，运行管理着其他的程序，充当着软硬件之间的桥梁\r\n\r\n  - 批处理：计算机变便宜变多，有不同的配置，写程序处理不同硬件细节很痛苦（兼容问题一直存在），所以操作系统负责抽象硬件，让计算机自动连续运作程序而不需要人工添加\r\n  - 设备驱动程序：提供API来抽象硬件\r\n\r\n  - 为程序分配运算资源，存储资源，保障程序安全有序地进行\r\n\r\n  - 为硬件提供 i/o接口，使之抽象成软件，进而对其进行操纵\r\n\r\n- 虚拟内存：程序可以假定内存总是从地址0开始，真实的物理位置被操作系统隐藏和抽象了\r\n\r\n  - 动态内存分配：操作系统可以自动映射，分成多个内存块的程序会按照顺序排下虚拟内存地址\r\n  - 内存保护：一个程序出错了不会影响到其他程序的内存（老版windows缺乏内存保护，导致经常蓝屏崩溃）\r\n    - 防控病毒\r\n\r\n- 分时操作系统（Multics）：每个用户只能用一小部分处理器和内存等资源，防止多用户使用终端的时候不会让一个人占满全部计算机资源\r\n\r\n## 19、内存&储存介质\r\n\r\n- Storage（存储器）：任何写入存储器的数据，会被一直保存，直到被覆盖或删除，断电也不会丢失\r\n\r\n- 技术创新使得存储的效率越来越高，考虑到整体的性价比，混合存储最为有利\r\n- 发展历程：纸卡-延迟线存储器-磁芯-磁带-硬盘-内存层次结构-软盘-光盘（CD）-固态硬盘（SSD）\r\n\r\n## 20、文件系统\r\n\r\n- 所有文件的底层都是一样的：一长串二进制\r\n  - 区分不同的文件格式，可以方便存取数据，支持特定应用\r\n- 计算机怎么存文件：\r\n  - 给每个文件预留多余空间\r\n  - 碎片：将文件内容分块存储，多余的存到另一处地方\r\n    - 碎片整理：将数据来回移动，排列成正确的顺序\r\n  - 删除：在覆盖之前，原本位置的数据仍然保留，所以一些已经被删除的数据是可以恢复的\r\n\r\n- 文件系统可以进行资源管理和保护数据\r\n- 分层文件系统：目录文件不仅要指向文件，还要指向目录，可以实现文件夹套文件夹\r\n\r\n## 21、压缩 \r\n\r\n- 通过对于数据的压缩，我们可以存储更多数据和传输数据的速度也可以更快\r\n\r\n- 压缩：\r\n\r\n  人的视觉和听觉都不是完美的\r\n\r\n  - 无损压缩：游程编码、字典编码 --> 不会有缺失的文件内容\r\n  - 有损压缩：\r\n    - 感知编码 --> 用不同精度编码不同频段，可以让图片/音频看起来差不多但是大小天差地别\r\n      - 电话中的声音和正常声音不一样，这是为了保证可以多人同时打电话；\r\n      - skype电话像人机\r\n      - 网速变慢，压缩算法会删除更多的数据\r\n    - （MPEG-4）视频编码 --> 时间冗余。视频里不是每一帧都存储全部像素，可以只存变了的部分\r\n      - 更高级的：找出每一帧之间相似的补丁，然后用简单的效果实现，比如移动/旋转、变亮/变暗\r\n      - 压缩太严重：没有足够空间更新补丁内的像素，即使补丁是错的，视频播放器也会照样播放\r\n\r\n## 22、命令行界面\r\n\r\n输入命令计算机会给予回应\r\n\r\n- 电传打字机\r\n\r\n- 命令行游戏：Zork，被认为是最早的互动式小说\r\n- Crash Course 游戏速成课\r\n\r\n## 23、屏幕&2D图像显示\r\n\r\n随着物理的发展和人机交互的进一步需求出现了屏幕\r\n\r\n进而催生了图像显示\r\n\r\n- 绘制图形：\r\n  - 矢量扫描：引导电子束描绘出形状\r\n  - 光栅扫描：按照固定路线，一行一行扫描\r\n- 像素：液晶显示屏（LCD）\r\n- VRAM：专门存高速高清视频的内存，在显卡上\r\n\r\n## 24、冷战和消费主义\r\n\r\n政府和消费者促进计算机发展\r\n\r\n政府巨额投资促进计算机科学的发展\r\n\r\n消费者的选择决定计算机技术的表达形式\r\n\r\n冷战导致美国向计算机领域投入大量资源\r\n\r\n## 25、个人计算机革命\r\n\r\n技术进步推动生产力的提升，计算机成为相对廉价的产品\r\n\r\n- 比尔盖茨和保罗艾伦：编写BASIC解释器\r\n- 乔布斯：建议买组装好的计算机 Apple-I 诞生\r\n- 1977年出现三款开箱即用的计算机\r\n- 计算机市场：\r\n  - IBM兼容：IBM发现市场采用开放架构\r\n  - 非IBM兼容：苹果选择封闭架构，在这一部分公司里只有苹果保证了足够的市场份额\r\n- Macintosh：普通人可以买到的第一台带图形用户界面的计算机，由苹果在1984年发布\r\n\r\n## 26、图形化用户界面GUI\r\n\r\n- 事件驱动编程，（函数指针） \r\n\r\n- 所见即所得\r\n\r\n- 微软的Windows\r\n\r\n- 恩格尔巴特：增强人类智能\r\n\r\n## 27、3D 图形\r\n\r\n3D转化为2D在计算机上显示\r\n\r\n- 线框渲染：将所有的点都从3D投影到2D之后，用画2D线段的函数来连接这些点\r\n- 正交投影：立方体的各个边在投影中互相平行\r\n- 透视投影：真实世界中，会汇聚到一点，就像远处的马路汇聚到一点\r\n- 多边形：即三角形。三角形更常用是因为三个点能定义唯一的平面\r\n- 网格：一些多边形的集合\r\n  - 网格越密，表面越光滑，细节也越多，计算量也更大\r\n  - 游戏设计者平衡多边形数量和真实度。\r\n  - 简化网格算法：多边形数量太多，帧率会下降到肉眼可感知，用户会觉得卡\r\n- **扫描线渲染**：填充图形的经典算法\r\n  - 算法实现：取y区间，一行行扫描，取和多边形相交两点，填满两相交点之间的像素\r\n  - fillrate：填充速率\r\n- **抗锯齿**：因为是三角形，所以会有锯齿感，这个是用来减轻锯齿的方法\r\n  - 实现：和多边形相交的点颜色变浅，实现羽化效果\r\n  - 使用：字体和图标\r\n- 遮挡：3D中一部分我们可以看见而一部分不能\r\n- 画家算法：排序算法，由远到近排列，然后由远到近渲染\r\n- 深度缓冲（Z-buffering算法）：记录场景中每个像素和摄像机的距离，在内存存一个数字矩阵。缓冲区，最终搭配高级扫描线渲染，确定每个像素点在最终场景中是否可见\r\n- Z Fighting 错误：使用深度缓冲时，有两个相似的图案，谁在上面不可预测\r\n- 背面剔除：3D游戏的优化，为了节省处理时间，忽略多边形的背面\r\n  - bug：从模型内部往外看，头部和地面会消失\r\n- 表面法线：三角形面对的方向\r\n- 平面着色：最基本的**照明**算法\r\n- 高洛德着色/冯氏着色：不止用一种颜色给整个多边形上色\r\n- **纹理**映射：纹理在图形学中指外观而不是手感\r\n- （GPU）图形处理单元：加速图形渲染，并行渲染\r\n  - 在显卡上，周围有专用的RAM存储网格和纹理，可以让GPU的多个核心高速访问\r\n\r\n## 28、计算机网络\r\n\r\n每个计算机都有一个固定的MAC地址，用于计算机之间的通信识别，多个计算机可以组成一个局域网，局域网以上可能有更大的区域网络，从另一个有固定MAC的计算机获取数据时可能跳转多个层级局域网，而在经过传输媒介获取数据的过程中可能出现冲突，可以使用交换器将计算机分组避免，传输数据也可以将数据分组以使用数据包来运输\r\n\r\n- 局域网（LAN）：计算机近距离组成的小型网络\r\n- 媒体访问控制地址（MAC）：MAC地址\r\n- 载波侦听多路访问：多台电脑共享一个传输媒介\r\n  - 载体：运输数据的共享媒介\r\n    - 以太网的载体是铜线\r\n    - WIFI的载体是传播无线电波的空气\r\n  - 带宽：媒体传输数据的速度\r\n- 指数退避：指数级增长等待时间，降低共享传输媒介导致的冲突\r\n- 冲突域：可以用交换机将一个冲突域拆成两个冲突域\r\n- 电路交换：电话接线员，类似专车接送\r\n- 报文交换：用不同路由使通信更可靠更能容错，通过路由跳转的次数叫做跳数，跳数过高路由肯定出错了，跳数限制，类似快递中转\r\n- 分组交换：文件包过大，将数据拆分成多个小数据包，通过灵活的路由传递，类似拆分发货\r\n- TCP/IP协议：防止小数据包乱序\r\n- 各种协议：ICMP（因特网控制消息协议）、BGP（边界网关协议）\r\n- 物联网：万物互联、智能家居\r\n\r\n## 29、互联网（协议和层级）\r\n\r\n互联网是传递数据的管道，各种程序都会用\r\n\r\n互联网是更大的计算机网络连接着更多的计算机，为了实现数据传输的要求，我们制定了诸多的协议，为了便于人类的检索习惯我们将域名和ip地址一一对应采用树状检索，为了使通信变得高效我们抽象了OSI（开放式系统互联网通信参考模型），一共七个层级\r\n\r\n- IP（互联网协议）：数据包想在互联网上传输要遵循的协议\r\n\r\n  - 数据包头部只有目标地址，存”关于数据的数据“ --> 元数据\r\n  - 当**数据包到达对方电脑**的时候并不知道要把包交给那个程序\r\n\r\n- UDP（用户数据报协议）\r\n\r\n  - 数据包头部含有端口号（每个想访问网络的程序，都要向操作系统申请一个端口号），操作系统会读取并将**数据包交给对应的程序**\r\n  - 校验和：存在于数据包头部，用于检查数据是否正确，如果数据包校验和与头部所保存的一致，那么数据传输正常\r\n  - 不提供数据修复或数据重发的机制，因此发送方无法得知数据包是否到达\r\n  - 简单快速（在线射击游戏）\r\n\r\n- TCP（传输控制协议）\r\n\r\n  - 所有数据必须到达的情况\r\n  - TCP/IP：头部存在数据包前面，头部由端口号和校验和\r\n  - 高级特性（相比于UDP）：\r\n    - TCP数据包有序号，因此可以把数据包排成正确顺序\r\n    - TCP要求接收方的电脑收到数据包，并且校验和检查无误后，向发送方发一个确认码（ACK）代表收到；上一个数据包成功抵达后，发送方才会发送下一个数据包，如果没收到确认码，过一段时间会重新发送一次\r\n    - TCP可以同时发送多个数据包收多个确认码\r\n    - TCP可以通过确认码（ACK）的成功率和来回时间推测网络的拥堵程度，调整发包数量，解决拥堵问题\r\n  - 复杂速度慢\r\n\r\n- DNS（域名系统）：计算机要访问一个网站需要IP地址和端口号，域名更好记忆，一个域名对应一个【IP地址+端口号】\r\n\r\n  - 浏览器搜索不存在的域名会导致DNS错误\r\n  - 存在的域名：浏览器根据这个IP地址发送TCP请求\r\n  - 域名用树状结构存储\r\n    - 顶级域名TLD（.com / .gov）\r\n    - 二级域名（www.google.com ）\r\n    - 子域名（images.google.com）\r\n\r\n- OSI（开放式系统互连通信参考模型）由底层到高层\r\n\r\n  底五层：查询DNS或者看网页的时候发生的一整套流程\r\n\r\n  - 物理层：线路里的电信号、无线网络里的无线信号\r\n  - 数据链路层：操控物理层。MAC、碰撞检测、指数退避、一些底层协议\r\n  - 网络层：报文交换和路由\r\n  - 传输层：负责计算机之间点到点的传输、检测修复错误。TCP、UDP等协议\r\n  - 会话层：使用TCP和UDP来创建连接、传递信息、关闭连接 \r\n  - 表示层：\r\n  - 应用程序层：\r\n\r\n## 30、万维网\r\n\r\n互联网是传递数据的管道，各种程序都会用，其中传输最多数据的**程序**是万维网，可以用浏览器来访问万维网\r\n\r\n万维网运行在互联网上，它的组成基本单位是**网页**，我们使用超链接进行网页之间的跳转，使用状态码标出网页的状态，每一个网页都有唯一的URL，使用http和html等便于我们传输网页数据和展示网页内容\r\n\r\n万维网的诞生基础和万维网的检索方式，以及传输数据的公平性\r\n\r\n- 页面：万维网基本组成单位\r\n\r\n- 超链接（Hyperlinks）：去往其他页面的链接\r\n- 超文本（Hypertext）：去往其他页面的文字链接\r\n- URL（统一资源定位器）：为了让网页能够相互连接，每个网页需要一个唯一的地址\r\n  - 基本组成：协议+域名（+端口+路径+查询字符串+锚点）\r\n- HTTP（超文本传输协议）：连接到域名服务器之后，请求某个页面\r\n- HTML（超文本标记语言）：为了标记什么是链接什么不是链接开发的标记语言\r\n- 网页浏览器：可以和网页服务器沟通，负责获取和显示\r\n- 1990：万维网黄金时代\r\n- 搜索引擎：\r\n  - 爬虫：跟着链接到处跑的软件，每当看到新链接，就加进自己的列表里\r\n  - 不断扩张的索引：记录访问过的网页上出现过哪些词\r\n  - 最初的查询索引的搜索算法：在搜索框内输入“猫”，每个含有猫的网页都会出现，排名方式为搜索词在页面上的出现次数\r\n    - 出现了全是“猫”文字的垃圾网站\r\n  - google的搜索算法：不信任网页上的内容，搜索引擎会看其他网站有没有链接到这个网站。这些反向链接的数量，代表着网站的质量\r\n- 网络中立性：应该平等的对待所有数据包，数据和优先级应该是一样的。\r\n  - 没有网络中立性可能会导致剥削性的服务器，会促进大公司垄断\r\n  - 有网络中立性会导致用户喜欢的网页被限流\r\n  - 综合考量\r\n\r\n## 31、计算机安全\r\n\r\n针对权限的人我们要具有验证的方式\r\n\r\n针对计算机，我们要保证计算机本身的稳定性和数据的完整性\r\n\r\n- 计算机安全保证我们数据的\r\n  - 保密性（Secrecy）：只有有权限的人才能读取计算机系统和数据\r\n    - 黑客泄露别人的信用卡信息：攻击保密性\r\n  - 完整性（Integrity）：只有有权限的人才能使用和修改系统和数据\r\n    - 黑客知道邮箱密码后，假冒他人发送邮件：攻击完整性\r\n  - 可用性（Availability）：有权限的人随时可以访问系统和数据\r\n    - 黑客进行拒绝服务攻击（DDOS）：攻击可用性，发送大量假请求到服务器，让网站很慢或者挂掉\r\n- 威胁模型分析：从以上三个目标出发，想象预防攻击\r\n  - 威胁模型：攻击手段\r\n\r\n- 身份验证：核心是只有被授予权限的人才可以使用计算机\r\n  - 你知道什么（what you know）：基于某个秘密只有计算机和用户知道，例如用户名和密码\r\n    - 暴力攻击：遍历所有可能，计算机很快\r\n    - 控制僵尸网络攻击：大量计算机同时用一个密码攻击多个账户（1对1）\r\n    - 预防攻击：大小写+数字\r\n  - 你有什么（what you have）：基于用户有特定物体，有效预防远程操控，例如生物识别\r\n  - 你是什么（what you are）\r\n- 双因素/多因素验证：>=2种身份验证方式\r\n- 访问控制：谁能访问什么，控制列表（ACL）\r\n  - 权限分类：READ、WRITE、EXECUTE（执行）\r\n- Bell-LaPadula 模型：不能向上读取，不能向下写入\r\n- 隔离（Isolation）：一个程序受到危害后，不让别的程序也被危害\r\n- 沙盒（Sandbox）：将程序放进沙盒完成隔离。给每个程序独有的内存块，其他程序不能动\r\n  - 一台计算机可以运行多个虚拟机，虚拟机模拟计算机，每个虚拟机都在自己的沙箱里\r\n- 设置密码两步验证，永远不要点开可疑邮件\r\n\r\n## 32、黑客&攻击\r\n\r\n针对计算机安全进行破解，如漏洞的利用，身份的欺骗等，通常是为了谋取利益\r\n\r\n- 社会工程学：黑客通过非技术手段 --> 诈骗来让他人泄露信息\r\n- 钓鱼：假的银行登录邮件，输入信息时，密码就会发送给黑客\r\n- 假托：攻击者给每个公司打电话，假装是IT部门的人\r\n- 木马：邮件里带有，偷窃数据、加密文件要求赎金\r\n- NAND镜像：近距离接触电脑后在内存里接上几根线\r\n- 漏洞利用：利用漏洞获取网络权限\r\n- 缓冲区溢出：预留的一块缓冲区被密码溢出覆盖了其他数据，导致系统崩溃\r\n- 边界检查：程序会存放随机变量在内存中的位置，这样黑客就不知道应该覆盖内存的哪里；\r\n- 金丝雀：在不用的内存里留一块区域，然后跟踪里面的值，看是否发生变化\r\n- 代码注入：攻击有数据库的网站，将SQL命令输入到用户名里\r\n- 零日漏洞：指软件开发者或用户尚未知晓的软件安全漏洞。“零日”指的是开发者或用户在发现漏洞的那一天，而攻击者可能在这一天或之前已经知道了这个漏洞并可能已经开始利用它。\r\n- 计算机蠕虫：在计算机之间复制传播\r\n- 僵尸网络\r\n- 拒绝服务攻击（DDos）\r\n\r\n## 33、加密\r\n\r\n加密是为了保护数据的安全，\r\n\r\n要对数据进行解密就需要规定对加密数据解密的形式与规则\r\n\r\n常见的有两种，对称加密和非对称加密\r\n\r\n- 多层防御：用多层不同的安全机制来阻碍攻击者\r\n- 加密\r\n- 凯撒加密\r\n- 替换加密\r\n- 移位加密\r\n- 列移位加密\r\n- 密钥交换\r\n- 非对称加密\r\n- 非对称加密算法\r\n\r\n\r\n\r\n## 34、机器学习与人工智能\r\n\r\n对得到的样本更具特性进行分类，对不同特性施加权重，在大量数据的总结下，针对一个问题可以得到解，前提是问题，方法是已知的\r\n\r\n- 分类\r\n- 分类器：做分类的算法\r\n- 特征：用特征训练算法\r\n- 标记数据\r\n- 决策边界\r\n- 混淆矩阵\r\n- 未标签数据\r\n- 决策树：每个特征用什么值\r\n- 支持向量机\r\n- 人工神经网络\r\n- 深度学习\r\n- 弱AI、窄AI：只进行特定任务\r\n- 强AI：chatGPT\r\n\r\n- 强化学习：机器通过反复试错来学习\r\n\r\n## 35、计算机视觉\r\n\r\n计算机通过对像素的局部或整体的分析，用以识别图像的信息，从而达到正确的反馈\r\n\r\n- 检测垂直边缘的算法：左右像素差别越大，这个像素越可能是边缘\r\n- 核/过滤器：不同的检测图案的算法\r\n- 卷积：把核应用于像素块的操作\r\n- Prewitt算子：边缘增强的核\r\n- 人脸检测\r\n- 卷积神经网络\r\n- 生物识别\r\n\r\n## 36、自然语言处理\r\n\r\n针对人类的自然语言进行数据化处理\r\n\r\n- 词性\r\n- 短语结构规则\r\n- 分析树\r\n- 语音识别\r\n- 谱图\r\n- 快速傅里叶变换\r\n- 音素\r\n- 语音合成\r\n\r\n## 37、机器人\r\n\r\n打造似人的机器，用来代替人来为人类服务\r\n\r\n## 38、计算机心理学\r\n\r\n人本思想，所有的造物应该以人类为中心，计算机更应该如此，计算机的一次次技术发展也是人类选择的原因\r\n\r\n## 39、教育科技\r\n\r\n计算机的发展促进了教育表现的形式，可以使人类更加高效地学习\r\n\r\n## 40、奇点，天网和计算机未来\r\n\r\n- 奇点：智能科技的失控性发展\r\n\r\n计算机作为人类的造物，如果智能强于人类，那么会带来什么结果\r\n\r\n是如同人类和猴子一般吗？当作动物园的宠物？\r\n\r\n无论如何失控性的发展对人类来说不是个好消息\r\n\r\n未来的未来就交给未来的人类吧',1,1,11,'2024-09-10 12:56:40','2025-07-28 08:38:13',0,'PixPin_2025-07-25_20-55-49.png'),(125,'2024寒假VJ','## **数据结构基础**\r\n\r\n#### A、表达式括号匹配（栈）\r\n\r\n循环遍历字符串s，一旦发现 \'(\'，压栈；一旦发现 \')\'且不是空栈，弹出一个 \'(\'；最后发现如果栈是空的并且不是中途  \')\' 就没了的，确定匹配成功。\r\n\r\n#### B、合并果子（小根堆）\r\n\r\n将数字放入小根堆。循环读取接受最小值---弹出---读取接受最小值---弹出---插入两数之和---累加当前和---直到小根堆里只剩下最后一个元素。输出累加的和。\r\n\r\n```c++\r\npriority_queue<int, vector<int>, greater<int> > pq;\r\n```\r\n\r\n#### C、机器翻译（双端队列```deque<int> qu```）\r\n\r\n两种方式都可以是完全一样的思路。但是双端队列比纯数组的时间更优\r\n\r\n思路：定义一个mp数组（```map<int, int> mp```），用它的值0 或 1用来模拟是否在当前内存里的功能；定义一个双端队列（```deque<int> qu```），用它来模拟内存。\r\n\r\n如果：当前生词不在内存之内（mp[] = 0）\r\n\r\n{\r\n如果生词数量（因为当前内存中没有需要需要查字典次数）ans > m了，就将 ans - m 处的字母 x 的 mp[x] 定义为0，用双端队列就直接```mp[qu.front()] = 0```并且将即可。\r\n\r\n}\r\n\r\n之后输出ans的次数即可。\r\n\r\n#### D、ICPC Balloons（set）\r\n\r\n意思就是这个比赛是好几个队伍（NEAU新生赛n个队伍参赛，一行字母是NEAU一共发出的气球字母）。\r\n\r\n所以思路非常简单：原本的长度n + 一血气球即可（```set.size()```）\r\n\r\n#### E、黑匣子（对顶堆、Hard）\r\n\r\n 对顶堆，小根堆对大根堆，其实本质上是不停add中间穿插了几次get\r\n\r\n在没有到达当前get命令（u值）之前，不停的add\r\n\r\n对顶堆：\r\n\r\n```c++\r\n// 大根堆，正三角，最上面的根（q1.top()）最大\r\npriority_queue<int> q1;\r\n// 小根堆，倒三角，最下面的根（q2.top()）最小\r\npriority_queue<int, vector<int>, greater<int>> q2;\r\n```\r\n\r\nadd过程：\r\n\r\n```c++\r\nwhile(pos < u){\r\n		pos++; // 计数\r\n        q1.push(a[pos]); // 插入大根堆，并且筛出i个数中的最大值，踢出最大值弹给小根堆，将自己变成前i-1个最小数\r\n     // 插入小根堆排序，不断add但是要维护大根堆数据个数，也就是“每次add都将前pos个数中的第i小的数放在q2.top()”\r\n		q2.push(q1.top());\r\n		// cout << q1.top() << \' \';\r\n		q1.pop();\r\n}\r\n```\r\n\r\nget过程：\r\n\r\n```c++\r\n cout << q2.top() <<endl; // 输出小根堆根，因为当前的大根堆q1一定是i-1个数\r\n// 还给大根堆排序，继续用于下一次add-get判断\r\n q1.push(q2.top()); // 大根堆q1变成i个数\r\n q2.pop();\r\n```\r\n\r\n#### F、Favorite Game（排序代价计算）\r\n\r\n本质上是计算拥有m个元素的字串范围在a[1]和a[2]之间的时候，这两个数变化的代价是什么\r\n\r\n先排序a[3] ~ a[n]\r\n\r\n代价判断：\r\n\r\n```c++\r\nsort(a.begin() + 3, a.end());\r\nfor (int i = 3; i <= n - m + 1; i++) {\r\n        int res = 0; //代价计算\r\n        int l = a[i], r = a[i + m - 1];\r\n        if (l < a[1]) res += a[1] - l;\r\n        if (r > a[2]) res += r - a[2];\r\n        ans = min(ans, res);\r\n}\r\ncout << ans << endl;\r\n```\r\n\r\n#### G、The Modcrab（vector的push_back，数组也可以）\r\n\r\n回合，也就是循环，到怪物血量h2 <= 0停止\r\n\r\n每个回合（循环）内需要考虑的：\r\n\r\n- 回血：我方血量h1 <= 怪物攻击a1\r\n- 攻击：h2 -= a1；\r\n  - 第一个回合的特判：如果怪物血量h2 <= 我方攻击a1：直接秒了 \r\n  - 其他情况（除了特判和回血的情况）\r\n- 怪物会给我们攻击，每次循环结尾的时候h1 -= a2\r\n\r\n#### H、Position in Fraction\r\n\r\n循环内模拟除法：\r\n\r\n小数结果：a * 10 / b;\r\n\r\n循环末计算a % b留给下一次循环用来 * 10  / b\r\n\r\n## 基础算法（一）\r\n\r\n#### A、很多人问，后面忘了（QAQ，前缀和）\r\n\r\n计算“到A下标为止，左右各有多少个Q”，将左右数量相乘即是以当前A为中间的QAQ的个数\r\n\r\n遇到A的代码：\r\n\r\n```c++\r\nans += (s[i - 1]) * (s[n] - s[i])\r\n```\r\n',1,1,6,'2024-01-16 13:46:02','2025-08-05 05:45:23',0,'20250717164038_311.jpg'),(128,'2025蓝桥','## c++算法题初始模板\r\n\r\n```c++\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\nconst int N = 100010;\r\nvoid solve() {\r\n    \r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n\r\n    int t = 1;\r\n    // cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## 0111 第25场蓝桥入门赛\r\n\r\n### 链接\r\n\r\n```pascal\r\n录制: 车丽钠的个人会议室\r\n日期: 2025-01-14 09:43:43\r\n录制文件：https://meeting.tencent.com/crm/NbZqMnaZ01\r\n```\r\n\r\n## 0125 第25场蓝桥月赛\r\n\r\n### 题解\r\n\r\n#### 求最长有序前缀子序列（长度）\r\n\r\n```c++\r\n  int n;\r\n  cin >> n;\r\n  vector<int> a(n);\r\n  for(int i = 0; i<n; i++){\r\n    cin >> a[i];\r\n  } \r\n  vector<int> b = a;// 复制一个用来排序sort.a\r\n  sort(b.begin(), b.end());\r\n  int k = 0;\r\n  for(int i = 0; i < n && k < n; i++){\r\n    if(a[i] == b[k]) k++;\r\n  }\r\n// k 为最长有序前缀子序列\r\n  cout << n - k << endl;\r\n```\r\n\r\n\r\n\r\n### **问题1：每次可以选择将任意位置的糖果移到最后，求使得糖果按照升序排列所需的最小操作次数**\r\n\r\n#### **问题分析**\r\n\r\n- **操作方式**：每次可以将任意一个糖果移到数组的最后。\r\n- **目标**：使数组变成升序排列。\r\n- **核心思路**：找到最长的递增子序列（LIS），剩下的元素都需要被移到最后，因此最小操作次数为 `n - LIS的长度`。\r\n\r\n### **问题2：每次可以选择将任意位置的糖果移到最前面，求使得糖果按照升序排列所需的最小操作次数**\r\n\r\n#### **问题分析**\r\n\r\n- **操作方式**：每次可以将任意一个糖果移到数组的最前面。\r\n- **目标**：使数组变成升序排列。\r\n- **核心思路**：找到最长的递增子序列（LIS），剩下的元素都需要被移到前面。与问题1不同的是，问题2的操作方式使得我们需要考虑从后向前的顺序。\r\n\r\n## 0208 第26场蓝桥入门赛\r\n\r\n### 链接\r\n\r\n```pascal\r\n录制: 车丽钠的个人会议室\r\n日期: 2025-02-13 20:12:12\r\n录制文件：https://meeting.tencent.com/crm/NQjP8rvX8c\r\n```\r\n\r\n修正：欧拉降幂φ(k)中k为合数是更复杂的公式\r\n\r\n- 当 *k* 为质数时（更简便）\r\n\r\n如果 *k* 是质数，那么欧拉函数 *φ*(*k*)=*k*−1。因此，欧拉定理可以简化为： *a**k*−1≡1mod*k* 对于任何与 *k* 互质的 *a*。\r\n\r\n这意味着，当 *k* 是质数时，我们可以将任何指数模 *k*−1 来简化计算。例如，计算 *a**b*mod*k* 时，我们可以计算 *a**b*mod(*k*−1)mod*k* 来得到相同的结果。\r\n\r\n- 当 *k* 为合数时（更复杂）\r\n\r\n如果 *k* 是合数，欧拉函数 *φ*(*k*) 的计算会更复杂，因为它涉及到 *k* 的所有质因数。具体来说，如果 *k* 有质因数分解 *k*=*p*1*e*1*p*2*e*2⋯*p**m**e**m*，则： *φ*(*k*)=*k*(1−*p*11)(1−*p*21)⋯(1−*p**m*1)\r\n\r\n在这种情况下，欧拉定理仍然适用，但是 *φ*(*k*) 的值不再是 *k*−1，而是上述公式计算的结果。因此，当我们需要计算 *a**b*mod*k* 时，我们需要计算 *a**b*mod*φ*(*k*)mod*k*。\r\n',1,1,16,'2025-01-20 13:50:56','2025-08-08 08:49:41',0,'36.jpg'),(129,'ComputerNetwork','# 常识\r\n\r\n## 问题\r\n\r\n- 手机和电脑怎么通信？\r\n- 洲际网络如何连接？\r\n- 网络是什么？\r\n- 海底光缆被切断和我们有关系吗？\r\n\r\n## 计算机的本质\r\n\r\n```plaintext\r\n用来计算和处理电信号的机器\r\n```\r\n\r\n#### 二进制\r\n\r\n计算机由大量晶体管组成，每个晶体管只存在高电平与低电平\r\n\r\n- 1：高电平（2.4-5V ）\r\n\r\n- 0：低电平（0~0.4V ）\r\n\r\n```plaintext\r\n各种图像、软件是封装好的二进制\r\n```\r\n\r\n## 实现计算机通信\r\n\r\n#### 两台计算机\r\n\r\n通过一根线链接设备 电信号传输 （**台数多就费线**）\r\n\r\n#### 集线器（Hub）\r\n\r\n用来转发消息的设备\r\n\r\n**缺点**\r\n\r\n```plaintext\r\n1.采取群发 隐私性差 已淘汰\r\n2.半双工工作模式 无法同时实现双向通信 类似于对讲机\r\n```\r\n\r\n#### 交换机\r\n\r\n- 在出厂时会记录设备的全球唯一标识：MAC地址（00:1A:2B:3C:4D:5E）\r\n\r\n- 全双工工作模式 类似于电话\r\n\r\n- 提高了带宽的利用率\r\n\r\n- 支持桥接：一根线连接两个交换机，实现互相访问\r\n\r\n**缺点**\r\n\r\n```plaintext\r\n1.局域网可用（一般为学校教学/公司用）\r\n2.交换机记录的 MAC 地址有限（几千到几万），设备太多，表会被写满，新的 MAC 地址会覆盖就地址\r\n3.多个交换机链接，消息传播路径会变长，连接顺序不合理会出现广播风暴、环路等问题\r\n```\r\n#### 路由器\r\n\r\n（不是WIFI无线路由器 是专门的网络设备）\r\n\r\n```plaintext\r\n基于路由算法，找到两个网络之间的更优路径，适用于多个网络互互联和数据转发。\r\n```\r\n\r\n#### IP地址\r\n\r\n区分不同网段的网络设备，临时标识，最终通信依然是 MAC 地址\r\n\r\n**让设备A1与B1通信：**\r\n\r\n- 路由器的准备工作\r\n\r\n​		- 分配网段（192.168.1.0/24）\r\n\r\n​		- 连接端口（192.168.1.1）//默认网关IP\r\n\r\n​		- 分配IP（192.168.1.10）\r\n\r\n- A1-B1：\r\n  	- A1要将数据发送给路由器\r\n  	- 在网络A寻找 IP 所对应的设备，找不到（在网络B） ------ 发送给路由器\r\n  	- 路由器存在路由表（记录 IP 和端口映射关系）------ 路由器根据路由表决定如何将数据转发到网络B\r\n  	- 在网络B中找到 IP 端口对应的 B1 的 MAC 地址， 发送数据\r\n  	- A1 会记录下 B1 的 MAC 地址， BUT **分处不同网段 无法直接通信，后续通信流程基本一致**。\r\n\r\n#### 全球通信（人类奇迹 互联网）\r\n\r\n**公网IP**：\r\n\r\n- IPv4 可标识 2e32 个网络设备 （43亿左右）------ 2019/11/26 耗尽\r\n\r\n- IPv6 可标识2e128个网络设备\r\n\r\n**海底光缆：**\r\n\r\n洲际通信：全球有数百条（建设ing）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Cookie/Session/Token\r\n\r\n```plaintext\r\nSession 是一种能力：是服务器见鬼说鬼话，见人说人话的能力\r\nToken 是一个字符串凭证：和你的各种证件一样功能的凭证，JWT 恰好是其中一种格式\r\nCookie 是浏览器中的一个存储技术：历史很久了，不用这个也可以\r\n\r\n以上连起来就是，你从自己的小钱包（Cookie） 里掏出了身份证（Token），递给了窗口（服务器）里面，从而达成了一种Session 能力\r\n```\r\n\r\n\r\n\r\n有两个问题：\r\n1.jwt泄露呢，谁都可以登录了，有啥解决办法吗?\r\n2.客户端请求长时间没响应，如何主动放弃请求呢',1,1,18,'2024-09-25 13:53:27','2025-08-08 08:49:12',0,'lb4.jpg'),(130,'CSpona开发相关','# vscode终端相关\r\n\r\n- 不可以 npm run dev\r\n\r\n```powershell\r\nSet-ExecutionPolicy RemoteSigned -Force\r\n```\r\n\r\n- 不可以 npm install\r\n\r\n打开nodejs源文件，属性-安全-编辑，给当前用户**完全控制**的权限\r\n\r\n# cmd\r\n\r\n在windows上打包go文件 管理员身份运行\r\n\r\n```powershell\r\n# 编译为 Linux 64 位可执行文件\r\nset GOOS=linux\r\nset GOARCH=amd64\r\ngo build -o main main.go\r\n```\r\n\r\n# Linux\r\n\r\n## 终端\r\n\r\n数据库导出\r\n\r\n```powershell\r\nmysqldump -u svb -p -h127.0.0.1  base >  /www/server/go_project/cspona/base.sql\r\n\r\n```\r\n\r\n\r\n\r\n## Nginx\r\n\r\n```nginx\r\nserver {\r\n    listen 80;\r\n    listen [::]:80;\r\n    listen 443 ssl ;\r\n    listen [::]:443 ssl ;\r\n    http2 on;\r\n    server_name cspona.top www.cspona.top;\r\n    \r\n    # 强制HTTPS重定向（推荐）\r\n    if ($scheme = http) {\r\n        return 301 https://$server_name$request_uri;\r\n    }\r\n\r\n    # SSL配置\r\n    ssl_certificate /www/server/panel/vhost/cert/cspona.top/fullchain.pem;\r\n    ssl_certificate_key /www/server/panel/vhost/cert/cspona.top/privkey.pem;\r\n    ssl_protocols TLSv1.2 TLSv1.3;\r\n    ssl_ciphers HIGH:!aNULL:!MD5;\r\n\r\n    # 通用API代理\r\n    location /api/ {\r\n        proxy_pass http://127.0.0.1:3000;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        add_header X-Config-Mode \"generic\" always;\r\n    }\r\n\r\n    # 前端路由\r\n    location / {\r\n        root /www/server/go_project/cspona/dist;\r\n        try_files $uri $uri/ /index.html;\r\n        index index.html;\r\n    }\r\n    \r\n    # 后端图片代理\r\n    location /Pictures {\r\n        alias /www/server/go_project/cspona/dist/Pictures;\r\n        # 其他配置...\r\n    }\r\n\r\n    # 日志配置\r\n    access_log /var/log/nginx/cspona.access.log;\r\n    error_log /var/log/nginx/cspona.error.log;\r\n}\r\n```\r\n\r\n\r\n\r\n重新加载nginx\r\n\r\n```powershell\r\n# 测试配置\r\nsudo nginx -t\r\n\r\n# 重载配置\r\nsudo systemctl reload nginx\r\nservice nginx restart\r\n\r\n# 测试并重新加载\r\nnginx -t && nginx -s reload\r\n\r\n# 查看所有文件对应后缀\r\nmime.types\r\n\r\n# 查看所有生效配置\r\nsudo nginx -T | grep -A 30 \"server_name cspona.top\"\r\n\r\n# 启动main（go）程序\r\ncd /www/xxxxx\r\nsudo -u www ./main\r\n\r\n```\r\n\r\n\r\n\r\n**尽管文件存在且权限正确，Nginx 仍然返回 404**。就是典型的配置路径映射错误。\r\n\r\n\r\n\r\n端口被占用\r\n\r\n``` powershell\r\n# 查找占用3000端口的进程\r\nsudo lsof -i :3000\r\n\r\n# 强制终止占用进程（假设PID是12345）\r\nsudo kill -9 12345\r\n```\r\n\r\n\r\n\r\n# Commit规范\r\n\r\nfeat:漫游地；个人中心；图片上传并显示url；编辑文章上传图片；\r\n\r\nfix:markdown加载和编辑\r\n\r\nstyle:更新样式',1,1,135,'2025-07-25 13:55:38','2025-08-08 13:55:04',0,'background.jpg'),(131,'测试文内文本','![Image](http://127.0.0.1:3000/Pictures/20250728134125_c0.jpg)\r\n# 一级标题\r\n## 二级标题\r\n文章正文：阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴\r\n### 三级标题\r\n```javascript\r\n// 代码块\r\nvar le = 25420312\r\n```\r\n#### 四级标题\r\n文章正文：阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴阿巴巴巴巴\r\n\r\n- 1\r\n - 2',12,1,5,'2025-07-28 05:44:25','2025-07-28 07:01:42',0,'ccc-back.jpg');
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `categories` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text,
  `img` varchar(255) DEFAULT NULL,
  `count` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'Coding-Study','代码学习','Venti-2.jpg',NULL),(2,'Project-Practice','项目实战','Venti-6.jpg',NULL),(3,'Plan','敬请期待','Venti-3.jpg',NULL),(4,'N-A-C-G','NACG','Venti-4.jpg',NULL),(5,'Travel','旅行日记','温迪-漫画封面.jpg',NULL),(12,'测试','AAA','Venti-5.jpg',NULL),(1000,'漫游地(Wanderland)','日常分享贴','Venti-7.jpg',NULL);
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` int NOT NULL,
  `user_id` int NOT NULL,
  `idea` text NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `parent_id` int DEFAULT NULL,
  `is_pinned` int DEFAULT '0',
  `pinned_at` timestamp NULL DEFAULT NULL,
  `reply_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_comment_fk` (`user_id`),
  KEY `a_c_fk` (`article_id`),
  KEY `fk_parent_comment` (`parent_id`),
  KEY `idx_comments_article_parent` (`article_id`,`parent_id`),
  KEY `idx_comments_user` (`user_id`),
  KEY `fk_reply_comment` (`reply_id`),
  CONSTRAINT `c_a_fk` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_parent_comment` FOREIGN KEY (`parent_id`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_reply_comment` FOREIGN KEY (`reply_id`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `user_comment_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=197 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (20,4,5,'你还送','2024-05-23 05:39:36','2025-07-16 01:00:33',NULL,0,NULL,NULL),(25,4,4,'哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈','2024-05-24 11:24:28','2025-07-15 14:23:50',20,0,NULL,NULL),(37,29,2,'123','2024-05-26 10:41:01','2024-05-26 10:41:01',NULL,0,NULL,NULL),(44,4,1,'喵喵喵','2024-05-29 06:58:35','2025-07-15 11:29:22',20,1,NULL,NULL),(73,16,1,'+10086','2024-05-31 13:47:50','2024-05-31 13:47:50',NULL,0,NULL,NULL),(99,4,5,'你好你好你好菜','2025-07-15 08:11:02','2025-07-15 08:11:02',NULL,0,NULL,NULL),(100,4,1,'信不信我删评','2025-07-15 08:11:36','2025-07-17 08:53:30',99,1,'2025-07-17 08:53:30',NULL),(101,4,5,'？？？？？玩不起','2025-07-15 08:13:25','2025-07-15 12:36:23',99,0,NULL,100),(107,4,1,'呵呵呵','2025-07-15 12:53:17','2025-07-15 12:56:52',99,0,NULL,101),(108,4,5,'你干嘛哎呦','2025-07-15 12:56:48','2025-07-15 12:56:48',99,0,NULL,107),(109,16,1,'222','2025-07-15 13:22:50','2025-07-15 15:07:39',73,1,NULL,73),(110,16,1,'2323','2025-07-15 13:22:54','2025-07-15 15:07:41',73,1,NULL,109),(114,4,3,'这是什么？新鲜的网站！我吃一口，我再吃一口，我大吃特吃，这么好的网站我吃完能去田里把牛踢开自己耕二十亩地！这么厉害的网站我直接敲锣打鼓奔走相告！你的网站棒棒棒','2025-07-15 14:19:48','2025-07-15 14:19:48',NULL,0,NULL,NULL),(115,4,1,'哇，是憧憧学姐，我亲亲亲亲亲','2025-07-15 14:21:18','2025-07-16 01:35:47',114,1,'2025-07-16 01:35:47',114),(116,4,3,'会夸吗你就在这夸，起开让我来。咳，ㅎㄹ...真的疯了 完全是  legend   啊ㅋㅋ这种程度真的不是天才吗 ㅅㅂ…做到这种程度的话就完全是神吧ㅠㅠ…以后也请一直更新网站吧♡  今天也是代码非常amazing的一天呢 是路过的蚂蚁都会惊叹的程度啊','2025-07-15 14:21:31','2025-07-16 01:35:49',114,1,'2025-07-16 01:35:49',114),(117,4,3,'往这亲（指脸）','2025-07-15 14:21:59','2025-07-16 01:35:45',114,1,'2025-07-16 01:35:45',115),(118,4,1,'我是偷文案侠，你猜我为什么在这里','2025-07-15 14:22:28','2025-07-16 01:35:38',114,1,'2025-07-16 01:35:38',116),(119,4,1,'muamuamuamuamua','2025-07-15 14:22:43','2025-07-16 01:35:42',114,1,'2025-07-16 01:35:42',117),(120,4,3,'你骂谁呢，不许骂我们伟大的管理员大人','2025-07-15 14:22:48','2025-07-17 08:53:48',99,1,'2025-07-17 08:53:48',108),(121,4,3,'我猜你要被我亲鼠啦，muamuamuamuamuamuamuamuamuamua','2025-07-15 14:23:32','2025-07-16 01:35:33',114,1,'2025-07-16 01:35:33',118),(122,4,1,'醉了.jpg','2025-07-15 14:24:13','2025-07-16 01:35:26',114,1,'2025-07-16 01:35:26',121),(124,4,1,'是换皮.jpg 但是我要感动哭了呜呜QAQ','2025-07-15 15:05:02','2025-07-15 15:05:02',99,0,NULL,120),(125,13,3,'学姐，cors是什么意思啊，为什么一定要这么写啊，我可不可以不加引号啊','2025-07-15 15:05:56','2025-07-15 15:05:56',NULL,0,NULL,NULL),(126,29,3,'气抖冷，为什么不用Ajax，你这是歧视，我要告你，你等着进橘子吧','2025-07-15 15:06:34','2025-07-15 15:06:34',NULL,0,NULL,NULL),(127,76,3,'居然有答案，我，我路过，随便看看，（瞄一眼），哎呀这些是什么啊，这我都看不懂啊（再瞄一眼）我真纯路人，我不知道什么c++，什么培训（再瞄一眼）（再瞄两眼）','2025-07-15 15:09:41','2025-07-15 15:09:41',NULL,0,NULL,NULL),(128,73,3,'小游戏！我要玩！可恶没有加速器','2025-07-15 15:10:29','2025-07-15 15:10:29',NULL,0,NULL,NULL),(129,74,3,'好多轮子，我偷一点……','2025-07-15 15:10:53','2025-07-15 15:10:53',NULL,0,NULL,NULL),(130,16,3,'水区！我来——','2025-07-15 15:12:33','2025-07-15 15:12:33',NULL,0,NULL,NULL),(131,77,3,'好看温迪，我看一眼，我再看一眼，我不看了。骗你的我直接偷走','2025-07-15 15:13:12','2025-07-15 15:13:12',NULL,0,NULL,NULL),(132,77,1,'呜呜呜呜呜呜不要哇，我就这一个温迪QAQ','2025-07-16 01:31:08','2025-07-16 01:31:08',131,0,NULL,131),(133,16,1,'水水水水水水','2025-07-16 01:31:25','2025-07-16 01:31:25',130,0,NULL,130),(134,73,1,'bug多多の小游戏','2025-07-16 01:32:04','2025-07-16 01:32:04',128,0,NULL,128),(135,74,1,'来，来赤','2025-07-16 01:32:16','2025-07-16 01:32:16',129,0,NULL,129),(137,13,1,'能运就能，不能运就不能，运不运而能不能叽里咕噜叽里咕噜几比几比恰吧恰吧唔理唔理哇啦哇啦','2025-07-16 01:34:37','2025-07-16 01:34:37',125,0,NULL,125),(138,29,1,'橘子？那很美味了嘎嘎嘎','2025-07-16 01:35:12','2025-07-16 01:35:12',126,0,NULL,126),(139,4,3,'我知道，骂的就是你，换皮侠，别以为你换个皮就可以为所欲为了，你就算再换一张皮我也认识你','2025-07-16 01:37:39','2025-07-17 08:53:45',99,0,NULL,124),(140,4,1,'呜呜呜呜呜呜，你居然骂我','2025-07-16 02:24:51','2025-07-16 02:24:51',99,0,NULL,139),(141,95,1,'天使降临博客背景','2025-07-16 05:38:38','2025-07-17 06:34:41',NULL,1,'2025-07-17 06:34:41',NULL),(142,101,1,'嘿嘿，温迪，嘿嘿','2025-07-17 01:28:30','2025-07-17 01:28:30',NULL,0,NULL,NULL),(150,95,1,'蹦蹦卡卡！','2025-07-17 06:34:52','2025-08-05 07:46:46',141,0,NULL,141),(152,95,3,'是天使！我们有救啦','2025-07-18 07:23:24','2025-07-18 07:23:24',141,0,NULL,150),(153,101,3,'你口水都留下来了','2025-07-18 07:27:18','2025-07-18 07:27:18',142,0,NULL,142),(154,101,3,'你得看我的，吸溜，温迪，吸溜','2025-07-18 07:27:42','2025-07-18 07:27:42',142,0,NULL,142),(155,101,3,'如果一起度假是你的愿望\n温迪宝宝！','2025-07-18 07:28:58','2025-07-18 07:28:58',NULL,0,NULL,NULL),(156,101,3,'我的回车不见了','2025-07-18 07:29:20','2025-07-18 07:29:20',155,0,NULL,155),(157,101,3,'那就敲敲电脑让大鱼开路\n温迪宝宝！','2025-07-18 07:30:20','2025-07-18 07:30:20',NULL,0,NULL,NULL),(158,101,3,'准备......','2025-07-18 07:30:51','2025-07-18 07:30:51',NULL,0,NULL,NULL),(159,101,3,'温迪宝宝！','2025-07-18 07:30:58','2025-07-18 07:30:58',158,0,NULL,158),(160,101,3,'温迪宝宝！','2025-07-18 07:31:04','2025-07-18 07:31:04',158,0,NULL,158),(161,101,3,'温迪宝宝！','2025-07-18 07:31:10','2025-07-18 07:31:10',158,0,NULL,158),(162,101,3,'温迪——宝宝——！','2025-07-18 07:31:34','2025-07-18 07:31:34',158,0,NULL,158),(163,101,5,'还得是你','2025-07-18 08:08:38','2025-07-18 08:08:38',142,0,NULL,154),(164,101,5,'评论不能回车确实是我的疏忽……\n','2025-07-18 08:09:13','2025-07-18 08:09:13',155,0,NULL,156),(165,101,5,'温迪——宝宝——！','2025-07-18 08:09:52','2025-07-18 08:09:52',158,0,NULL,158),(166,114,1,'不卖，但我这里有石榴汁()','2025-07-18 09:35:15','2025-07-18 09:35:15',NULL,0,NULL,NULL),(167,114,3,'那也行吧，多少钱一杯','2025-07-18 09:51:48','2025-07-18 09:51:48',166,0,NULL,166),(168,114,1,'需要用你的折耳根来换','2025-07-18 10:36:31','2025-07-18 10:36:31',166,0,NULL,167),(169,76,1,'偷看答案该当何罪','2025-07-18 10:38:13','2025-07-18 10:38:13',127,0,NULL,127),(172,13,47,'部署的时候尽量要明确指定允许的源噢，只包含明确允许访问后端 API 的前端网页的域名，不然会比较不安全。\n在Gin里的话，可以通过环境变量或者用Viper读配置文件来实现开发环境和生产环境的切换(*^_^*)','2025-07-20 07:04:23','2025-07-20 07:04:23',NULL,0,NULL,NULL),(173,114,3,'那我不喝了','2025-07-21 02:11:06','2025-07-21 02:11:06',166,0,NULL,168),(174,116,3,'已经变成新电影的样子了','2025-07-21 02:11:45','2025-07-21 02:11:45',NULL,0,NULL,NULL),(175,114,1,'这样就放弃了么，看来你还是没有喝石榴汁的觉悟.jpg','2025-07-21 02:17:08','2025-07-21 02:17:08',166,0,NULL,173),(176,116,1,'这么快！','2025-07-21 02:18:03','2025-07-21 02:18:03',174,0,NULL,174),(177,95,47,'很漂亮！','2025-07-21 05:09:01','2025-07-21 05:09:01',NULL,0,NULL,NULL),(178,114,3,'可恶啊，是此世必要之石榴汁，那好吧，我跟你换','2025-07-23 02:30:34','2025-07-23 02:30:34',166,0,NULL,175),(179,116,3,'就是很快！','2025-07-23 02:30:47','2025-07-23 02:30:47',174,0,NULL,176),(180,114,1,'好吃折耳根，我嚼嚼嚼嚼嚼','2025-07-23 09:41:48','2025-07-23 09:41:48',166,0,NULL,178),(181,116,1,'你的速度强强强','2025-07-23 09:42:16','2025-07-23 09:42:16',174,0,NULL,174),(182,95,1,'捉！','2025-07-23 09:42:38','2025-07-23 09:42:38',177,0,NULL,177),(183,13,1,'谢谢学长！我来改一下( •̀ω•́)✧✧','2025-07-23 10:50:12','2025-08-05 07:46:18',172,0,NULL,172),(184,114,3,'好喝石榴汁，我喝喝喝','2025-07-24 00:52:56','2025-07-24 00:52:56',166,0,NULL,180),(185,116,3,'最速传说','2025-07-24 00:53:50','2025-07-24 00:53:50',174,0,NULL,181),(186,76,3,'那就罚我再看两眼好了','2025-07-24 00:55:27','2025-07-24 00:55:27',127,0,NULL,169),(187,4,3,'来，来删','2025-07-24 00:56:49','2025-07-24 00:56:49',99,0,NULL,100),(188,4,3,'删完我就挂你呜呜呜呜呜呜呜管理员欺负人','2025-07-24 00:57:28','2025-07-24 00:57:28',99,0,NULL,100),(192,121,1,'悠真好帅.jpg','2025-07-25 12:25:14','2025-07-25 12:25:14',NULL,0,NULL,NULL),(194,130,1,'11','2025-08-05 06:31:54','2025-08-05 06:38:43',NULL,0,NULL,NULL),(195,130,1,'1212','2025-08-05 06:32:00','2025-08-05 06:32:00',194,0,NULL,194),(196,13,1,'111123','2025-08-05 07:43:03','2025-08-05 07:46:05',NULL,0,NULL,NULL);
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `friends`
--

DROP TABLE IF EXISTS `friends`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `friends` (
  `name` varchar(255) DEFAULT NULL,
  `web` varchar(255) DEFAULT NULL,
  `introduction` varchar(255) DEFAULT NULL,
  `img` varchar(255) DEFAULT NULL,
  `id` int NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `background` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `friends`
--

LOCK TABLES `friends` WRITE;
/*!40000 ALTER TABLE `friends` DISABLE KEYS */;
INSERT INTO `friends` VALUES ('云深晴雨','https://yunshenqingyu.top','纵使晴明无雨色，入云深处亦沾衣','lsc.png',35,'logo.png','background1.webp','试问，你就是我的访客吗？'),('桀桀桀の网站','https://cspona.top','桀桀桀，其实还是这个网站哦','Venti-6.jpg',36,'Venti-4.jpg','Venti-3.jpg','never give up~'),('Refined','https://neteralex.cn/','NeterAlex的个人站与博客','幻灯片1.JPG',39,'Touno(1).jpg','maxim-berg-ANuuRuCRRAc-unsplash(1).jpg','欢迎！');
/*!40000 ALTER TABLE `friends` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messages` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `content` text NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `u_m_fk_unique` (`user_id`),
  CONSTRAINT `u_m_fk_unique` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
INSERT INTO `messages` VALUES (1,1,'完结撒花！','2024-05-30 06:50:29'),(2,2,'完结撒花！','2024-05-30 06:50:29'),(3,3,'这是什么？网站！蹲一下  ','2025-07-10 07:59:15'),(4,6,'是我是我是我是我是我是我我是第一个观众啊！','2025-07-15 13:09:52'),(5,6,'完美完美完美完美完美完美完美','2025-07-15 13:10:07'),(6,6,'嘿嘿嘿嘿嘿嘿嘿嘿嘿','2025-07-15 13:10:22'),(7,7,'喵喵咪','2025-07-15 13:10:35'),(8,8,'我的天！你这个网页留言板也太神了吧 —— 打开的瞬间我眼睛都亮了！这配色简直像把春天揉进去了，清爽得让人想一直盯着看，连每个按钮的圆角弧度都恰到好处，舒服到想给设计师加鸡腿！','2025-07-15 13:10:52'),(9,8,'排版更是绝了，留言框之间的间距、字体大小、行高，感觉像是拿尺子量过一样，多一分太挤，少一分太松，看着就俩字：舒坦！','2025-07-15 13:11:13'),(10,8,'交互也丝滑到离谱，输入留言的时候光标跟着手速飞，提交按钮一点就有反馈，连加载时那个小动画都透着机灵劲儿，细节控表示根本满足！','2025-07-15 13:11:24'),(11,8,'真的，这哪是留言板啊，简直是艺术品！能把一个简单的东西做到这么精致，你也太厉害了吧，我现在满脑子都是 “怎么能这么会做啊”，太牛了太牛了！','2025-07-15 13:11:44');
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reminders`
--

DROP TABLE IF EXISTS `reminders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `reminders` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text,
  `remind_at` datetime NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `fk_reminders_user` (`user_id`),
  CONSTRAINT `fk_reminders_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reminders`
--

LOCK TABLES `reminders` WRITE;
/*!40000 ALTER TABLE `reminders` DISABLE KEYS */;
INSERT INTO `reminders` VALUES (1,1,'取快递qqq','qqqqqqqqqqqqq','2025-08-11 07:04:00','2025-08-09 02:37:45','2025-08-09 05:45:11'),(2,1,'取快递','明天下午四点','2025-08-09 16:15:00','2025-08-09 02:38:34','2025-08-09 08:14:08'),(5,1,'Test','TESTTEST','2025-08-09 14:16:00','2025-08-09 06:12:23','2025-08-09 06:15:51'),(6,4,'吃饭111','该吃饭了叽里咕噜叽里咕噜','2025-08-09 17:29:00','2025-08-09 08:15:29','2025-08-09 09:28:56');
/*!40000 ALTER TABLE `reminders` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `role_qx` varchar(20) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `article_count` int DEFAULT '0',
  `email` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `email_smtp` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'长柄木勺','mH7bNTkcrZuPAA==','2024-05-18 12:49:38','A','1212212.jpg',0,'changbingmushao@qq.com','oiiaioiiiai！','U9UJ4L_vlbHccrzrQARz5PjM0LKitv4YvItWV0P71K2vyRqW6WE9m0a8lxGOVIRr'),(2,'YRN','A1bGGOA9g2Z26w==','2024-05-23 08:17:02','B','yrn.jpg',0,NULL,NULL,NULL),(3,'云深晴雨','WoEDMXNFMUsTgA==','2025-07-10 04:28:30','B','logo.png',0,'2121673191@qq.com','纵使晴明无雨色，入云深处亦沾衣',NULL),(4,'AAA','mH7bNTkcrZuPAA==','2025-07-15 03:12:52','B','',0,'changbingmushao@qq.com','','eFKdNKUW8pv7I--0swSaHnE5W5NcxaWqI5KiLdI0PQwEnp606B8ixn0GiL_tZeLl'),(5,'BBB','mH7bNTkcrZuPAA==','2025-07-15 07:57:07','B','20250718161943_33.png',0,'changbingmushao@qq.com','蹦蹦卡卡！',NULL),(6,'念安','JamwLQyVuLxtag==','2025-07-14 14:31:44','B','屏幕截图 2025-04-30 192125.png',0,'2307920674@qq.com',NULL,NULL),(7,'放羊','JkRePKzIjXe3vA==','2025-07-14 17:23:32','B','qq人.png',0,'cuijingjing1234@qq.com',NULL,NULL),(8,'栖姁','W64opj4Oqg1n7Q==','2025-07-15 06:17:29','B','微信图片_20250707210607.jpg',0,'111','oiiaioiiiai！',NULL),(46,'星月梦游记','Z10mrOpzIa809g==','2025-07-18 08:44:50','B','1752828256155.jpg',0,'1943733509@qq.com','',NULL),(47,'NeterAlex','EEtoZH9PtwtAyw==','2025-07-20 07:03:36','B','Touno(1).jpg',0,'neteralex@outlook.com','喵呜',NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-08-09 17:31:26
